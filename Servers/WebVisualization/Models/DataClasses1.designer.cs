#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tracker
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="New")]
	public partial class DB : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDeletedLocation(Tracker.Model.DeletedLocation instance);
    partial void UpdateDeletedLocation(Tracker.Model.DeletedLocation instance);
    partial void DeleteDeletedLocation(Tracker.Model.DeletedLocation instance);
    partial void InsertLocation(Tracker.Model.Location instance);
    partial void UpdateLocation(Tracker.Model.Location instance);
    partial void DeleteLocation(Tracker.Model.Location instance);
    partial void InsertLocationLink(Tracker.Model.LocationLink instance);
    partial void UpdateLocationLink(Tracker.Model.LocationLink instance);
    partial void DeleteLocationLink(Tracker.Model.LocationLink instance);
    partial void InsertStructure(Tracker.Model.Structure instance);
    partial void UpdateStructure(Tracker.Model.Structure instance);
    partial void DeleteStructure(Tracker.Model.Structure instance);
    partial void InsertStructureTemplate(Tracker.Model.StructureTemplate instance);
    partial void UpdateStructureTemplate(Tracker.Model.StructureTemplate instance);
    partial void DeleteStructureTemplate(Tracker.Model.StructureTemplate instance);
    partial void InsertStructureType(Tracker.Model.StructureType instance);
    partial void UpdateStructureType(Tracker.Model.StructureType instance);
    partial void DeleteStructureType(Tracker.Model.StructureType instance);
    #endregion
		
		public DB() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NewConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Tracker.Model.DeletedLocation> DeletedLocations
		{
			get
			{
				return this.GetTable<Tracker.Model.DeletedLocation>();
			}
		}
		
		public System.Data.Linq.Table<Tracker.Model.Location> Locations
		{
			get
			{
				return this.GetTable<Tracker.Model.Location>();
			}
		}
		
		public System.Data.Linq.Table<Tracker.Model.LocationLink> LocationLinks
		{
			get
			{
				return this.GetTable<Tracker.Model.LocationLink>();
			}
		}
		
		public System.Data.Linq.Table<Tracker.Model.Structure> Structures
		{
			get
			{
				return this.GetTable<Tracker.Model.Structure>();
			}
		}
		
		public System.Data.Linq.Table<Tracker.Model.StructureLink> StructureLinks
		{
			get
			{
				return this.GetTable<Tracker.Model.StructureLink>();
			}
		}
		
		public System.Data.Linq.Table<Tracker.Model.StructureTemplate> StructureTemplates
		{
			get
			{
				return this.GetTable<Tracker.Model.StructureTemplate>();
			}
		}
		
		public System.Data.Linq.Table<Tracker.Model.StructureType> StructureTypes
		{
			get
			{
				return this.GetTable<Tracker.Model.StructureType>();
			}
		}
	}
}
namespace Tracker.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[Table(Name="dbo.DeletedLocations")]
	public partial class DeletedLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.DateTime _DeletedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDeletedOnChanging(System.DateTime value);
    partial void OnDeletedOnChanged();
    #endregion
		
		public DeletedLocation()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_DeletedOn", DbType="DateTime NOT NULL")]
		public System.DateTime DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ParentID;
		
		private double _X;
		
		private double _Y;
		
		private double _Z;
		
		private System.Data.Linq.Binary _Verticies;
		
		private bool _Closed;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Data.Linq.Binary _Overlay;
		
		private string _Tags;
		
		private double _VolumeX;
		
		private double _VolumeY;
		
		private bool _Terminal;
		
		private bool _OffEdge;
		
		private double _Radius;
		
		private short _TypeCode;
		
		private System.DateTime _LastModified;
		
		private System.DateTime _Created;
		
		private EntitySet<LocationLink> _LocationLinks;
		
		private EntitySet<LocationLink> _LocationLinks1;
		
		private EntityRef<Structure> _Structure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(long value);
    partial void OnParentIDChanged();
    partial void OnXChanging(double value);
    partial void OnXChanged();
    partial void OnYChanging(double value);
    partial void OnYChanged();
    partial void OnZChanging(double value);
    partial void OnZChanged();
    partial void OnVerticiesChanging(System.Data.Linq.Binary value);
    partial void OnVerticiesChanged();
    partial void OnClosedChanging(bool value);
    partial void OnClosedChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnOverlayChanging(System.Data.Linq.Binary value);
    partial void OnOverlayChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnVolumeXChanging(double value);
    partial void OnVolumeXChanged();
    partial void OnVolumeYChanging(double value);
    partial void OnVolumeYChanged();
    partial void OnTerminalChanging(bool value);
    partial void OnTerminalChanged();
    partial void OnOffEdgeChanging(bool value);
    partial void OnOffEdgeChanged();
    partial void OnRadiusChanging(double value);
    partial void OnRadiusChanged();
    partial void OnTypeCodeChanging(short value);
    partial void OnTypeCodeChanged();
    partial void OnLastModifiedChanging(System.DateTime value);
    partial void OnLastModifiedChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public Location()
		{
			this._LocationLinks = new EntitySet<LocationLink>(new Action<LocationLink>(this.attach_LocationLinks), new Action<LocationLink>(this.detach_LocationLinks));
			this._LocationLinks1 = new EntitySet<LocationLink>(new Action<LocationLink>(this.attach_LocationLinks1), new Action<LocationLink>(this.detach_LocationLinks1));
			this._Structure = default(EntityRef<Structure>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Structure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_X", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[Column(Storage="_Y", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[Column(Storage="_Z", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this.OnZChanging(value);
					this.SendPropertyChanging();
					this._Z = value;
					this.SendPropertyChanged("Z");
					this.OnZChanged();
				}
			}
		}
		
		[Column(Storage="_Verticies", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Verticies
		{
			get
			{
				return this._Verticies;
			}
			set
			{
				if ((this._Verticies != value))
				{
					this.OnVerticiesChanging(value);
					this.SendPropertyChanging();
					this._Verticies = value;
					this.SendPropertyChanged("Verticies");
					this.OnVerticiesChanged();
				}
			}
		}
		
		[Column(Storage="_Closed", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Closed
		{
			get
			{
				return this._Closed;
			}
			set
			{
				if ((this._Closed != value))
				{
					this.OnClosedChanging(value);
					this.SendPropertyChanging();
					this._Closed = value;
					this.SendPropertyChanged("Closed");
					this.OnClosedChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Overlay", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Overlay
		{
			get
			{
				return this._Overlay;
			}
			set
			{
				if ((this._Overlay != value))
				{
					this.OnOverlayChanging(value);
					this.SendPropertyChanging();
					this._Overlay = value;
					this.SendPropertyChanged("Overlay");
					this.OnOverlayChanged();
				}
			}
		}
		
		[Column(Storage="_Tags", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[Column(Storage="_VolumeX", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double VolumeX
		{
			get
			{
				return this._VolumeX;
			}
			set
			{
				if ((this._VolumeX != value))
				{
					this.OnVolumeXChanging(value);
					this.SendPropertyChanging();
					this._VolumeX = value;
					this.SendPropertyChanged("VolumeX");
					this.OnVolumeXChanged();
				}
			}
		}
		
		[Column(Storage="_VolumeY", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double VolumeY
		{
			get
			{
				return this._VolumeY;
			}
			set
			{
				if ((this._VolumeY != value))
				{
					this.OnVolumeYChanging(value);
					this.SendPropertyChanging();
					this._VolumeY = value;
					this.SendPropertyChanged("VolumeY");
					this.OnVolumeYChanged();
				}
			}
		}
		
		[Column(Storage="_Terminal", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Terminal
		{
			get
			{
				return this._Terminal;
			}
			set
			{
				if ((this._Terminal != value))
				{
					this.OnTerminalChanging(value);
					this.SendPropertyChanging();
					this._Terminal = value;
					this.SendPropertyChanged("Terminal");
					this.OnTerminalChanged();
				}
			}
		}
		
		[Column(Storage="_OffEdge", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool OffEdge
		{
			get
			{
				return this._OffEdge;
			}
			set
			{
				if ((this._OffEdge != value))
				{
					this.OnOffEdgeChanging(value);
					this.SendPropertyChanging();
					this._OffEdge = value;
					this.SendPropertyChanged("OffEdge");
					this.OnOffEdgeChanged();
				}
			}
		}
		
		[Column(Storage="_Radius", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double Radius
		{
			get
			{
				return this._Radius;
			}
			set
			{
				if ((this._Radius != value))
				{
					this.OnRadiusChanging(value);
					this.SendPropertyChanging();
					this._Radius = value;
					this.SendPropertyChanged("Radius");
					this.OnRadiusChanged();
				}
			}
		}
		
		[Column(Storage="_TypeCode", DbType="SmallInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public short TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModified", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Association(Name="Location_LocationLink", Storage="_LocationLinks", ThisKey="ID", OtherKey="A")]
		public EntitySet<LocationLink> LocationLinks
		{
			get
			{
				return this._LocationLinks;
			}
			set
			{
				this._LocationLinks.Assign(value);
			}
		}
		
		[Association(Name="Location_LocationLink1", Storage="_LocationLinks1", ThisKey="ID", OtherKey="B")]
		public EntitySet<LocationLink> LocationLinks1
		{
			get
			{
				return this._LocationLinks1;
			}
			set
			{
				this._LocationLinks1.Assign(value);
			}
		}
		
		[Association(Name="Structure_Location", Storage="_Structure", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Structure Structure
		{
			get
			{
				return this._Structure.Entity;
			}
			set
			{
				Structure previousValue = this._Structure.Entity;
				if (((previousValue != value) 
							|| (this._Structure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Structure.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Structure.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(long);
					}
					this.SendPropertyChanged("Structure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationLinks(LocationLink entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_LocationLinks(LocationLink entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_LocationLinks1(LocationLink entity)
		{
			this.SendPropertyChanging();
			entity.Location1 = this;
		}
		
		private void detach_LocationLinks1(LocationLink entity)
		{
			this.SendPropertyChanging();
			entity.Location1 = null;
		}
	}
	
	[Table(Name="dbo.LocationLink")]
	public partial class LocationLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _A;
		
		private long _B;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Location> _Location1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAChanging(long value);
    partial void OnAChanged();
    partial void OnBChanging(long value);
    partial void OnBChanged();
    #endregion
		
		public LocationLink()
		{
			this._Location = default(EntityRef<Location>);
			this._Location1 = default(EntityRef<Location>);
			OnCreated();
		}
		
		[Column(Storage="_A", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long A
		{
			get
			{
				return this._A;
			}
			set
			{
				if ((this._A != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAChanging(value);
					this.SendPropertyChanging();
					this._A = value;
					this.SendPropertyChanged("A");
					this.OnAChanged();
				}
			}
		}
		
		[Column(Storage="_B", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long B
		{
			get
			{
				return this._B;
			}
			set
			{
				if ((this._B != value))
				{
					if (this._Location1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBChanging(value);
					this.SendPropertyChanging();
					this._B = value;
					this.SendPropertyChanged("B");
					this.OnBChanged();
				}
			}
		}
		
		[Association(Name="Location_LocationLink", Storage="_Location", ThisKey="A", OtherKey="ID", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.LocationLinks.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.LocationLinks.Add(this);
						this._A = value.ID;
					}
					else
					{
						this._A = default(long);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[Association(Name="Location_LocationLink1", Storage="_Location1", ThisKey="B", OtherKey="ID", IsForeignKey=true)]
		public Location Location1
		{
			get
			{
				return this._Location1.Entity;
			}
			set
			{
				Location previousValue = this._Location1.Entity;
				if (((previousValue != value) 
							|| (this._Location1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location1.Entity = null;
						previousValue.LocationLinks1.Remove(this);
					}
					this._Location1.Entity = value;
					if ((value != null))
					{
						value.LocationLinks1.Add(this);
						this._B = value.ID;
					}
					else
					{
						this._B = default(long);
					}
					this.SendPropertyChanged("Location1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Structure")]
	public partial class Structure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _TypeID;
		
		private string _Notes;
		
		private bool _Verified;
		
		private string _Tags;
		
		private double _Confidence;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<long> _ParentID;
		
		private System.DateTime _Created;
		
		private string _Label;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<Structure> _Structures;
		
		private EntityRef<Structure> _Structure1;
		
		private EntityRef<StructureType> _StructureType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(long value);
    partial void OnTypeIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnVerifiedChanging(bool value);
    partial void OnVerifiedChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnConfidenceChanging(double value);
    partial void OnConfidenceChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnParentIDChanging(System.Nullable<long> value);
    partial void OnParentIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    #endregion
		
		public Structure()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._Structures = new EntitySet<Structure>(new Action<Structure>(this.attach_Structures), new Action<Structure>(this.detach_Structures));
			this._Structure1 = default(EntityRef<Structure>);
			this._StructureType = default(EntityRef<StructureType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._StructureType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_Verified", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Verified
		{
			get
			{
				return this._Verified;
			}
			set
			{
				if ((this._Verified != value))
				{
					this.OnVerifiedChanging(value);
					this.SendPropertyChanging();
					this._Verified = value;
					this.SendPropertyChanged("Verified");
					this.OnVerifiedChanged();
				}
			}
		}
		
		[Column(Storage="_Tags", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[Column(Storage="_Confidence", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public double Confidence
		{
			get
			{
				return this._Confidence;
			}
			set
			{
				if ((this._Confidence != value))
				{
					this.OnConfidenceChanging(value);
					this.SendPropertyChanging();
					this._Confidence = value;
					this.SendPropertyChanged("Confidence");
					this.OnConfidenceChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Structure1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Label", DbType="VarChar(64)", UpdateCheck=UpdateCheck.Never)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[Association(Name="Structure_Location", Storage="_Locations", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[Association(Name="Structure_Structure", Storage="_Structures", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<Structure> Structures
		{
			get
			{
				return this._Structures;
			}
			set
			{
				this._Structures.Assign(value);
			}
		}
		
		[Association(Name="Structure_Structure", Storage="_Structure1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public Structure Structure1
		{
			get
			{
				return this._Structure1.Entity;
			}
			set
			{
				Structure previousValue = this._Structure1.Entity;
				if (((previousValue != value) 
							|| (this._Structure1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Structure1.Entity = null;
						previousValue.Structures.Remove(this);
					}
					this._Structure1.Entity = value;
					if ((value != null))
					{
						value.Structures.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("Structure1");
				}
			}
		}
		
		[Association(Name="StructureType_Structure", Storage="_StructureType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public StructureType StructureType
		{
			get
			{
				return this._StructureType.Entity;
			}
			set
			{
				StructureType previousValue = this._StructureType.Entity;
				if (((previousValue != value) 
							|| (this._StructureType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StructureType.Entity = null;
						previousValue.Structures.Remove(this);
					}
					this._StructureType.Entity = value;
					if ((value != null))
					{
						value.Structures.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(long);
					}
					this.SendPropertyChanged("StructureType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Structure = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Structure = null;
		}
		
		private void attach_Structures(Structure entity)
		{
			this.SendPropertyChanging();
			entity.Structure1 = this;
		}
		
		private void detach_Structures(Structure entity)
		{
			this.SendPropertyChanging();
			entity.Structure1 = null;
		}
	}
	
	[Table(Name="dbo.StructureLink")]
	public partial class StructureLink
	{
		
		private long _SourceID;
		
		private long _TargetID;
		
		private bool _Bidirectional;
		
		public StructureLink()
		{
		}
		
		[Column(Storage="_SourceID", DbType="BigInt NOT NULL")]
		public long SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					this._SourceID = value;
				}
			}
		}
		
		[Column(Storage="_TargetID", DbType="BigInt NOT NULL")]
		public long TargetID
		{
			get
			{
				return this._TargetID;
			}
			set
			{
				if ((this._TargetID != value))
				{
					this._TargetID = value;
				}
			}
		}
		
		[Column(Storage="_Bidirectional", DbType="Bit NOT NULL")]
		public bool Bidirectional
		{
			get
			{
				return this._Bidirectional;
			}
			set
			{
				if ((this._Bidirectional != value))
				{
					this._Bidirectional = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.StructureTemplates")]
	public partial class StructureTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private long _StructureTypeID;
		
		private string _StructureTags;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<StructureType> _StructureType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStructureTypeIDChanging(long value);
    partial void OnStructureTypeIDChanged();
    partial void OnStructureTagsChanging(string value);
    partial void OnStructureTagsChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public StructureTemplate()
		{
			this._StructureType = default(EntityRef<StructureType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="Char(64) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_StructureTypeID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long StructureTypeID
		{
			get
			{
				return this._StructureTypeID;
			}
			set
			{
				if ((this._StructureTypeID != value))
				{
					if (this._StructureType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStructureTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StructureTypeID = value;
					this.SendPropertyChanged("StructureTypeID");
					this.OnStructureTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_StructureTags", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string StructureTags
		{
			get
			{
				return this._StructureTags;
			}
			set
			{
				if ((this._StructureTags != value))
				{
					this.OnStructureTagsChanging(value);
					this.SendPropertyChanging();
					this._StructureTags = value;
					this.SendPropertyChanged("StructureTags");
					this.OnStructureTagsChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="StructureType_StructureTemplate", Storage="_StructureType", ThisKey="StructureTypeID", OtherKey="ID", IsForeignKey=true)]
		public StructureType StructureType
		{
			get
			{
				return this._StructureType.Entity;
			}
			set
			{
				StructureType previousValue = this._StructureType.Entity;
				if (((previousValue != value) 
							|| (this._StructureType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StructureType.Entity = null;
						previousValue.StructureTemplates.Remove(this);
					}
					this._StructureType.Entity = value;
					if ((value != null))
					{
						value.StructureTemplates.Add(this);
						this._StructureTypeID = value.ID;
					}
					else
					{
						this._StructureTypeID = default(long);
					}
					this.SendPropertyChanged("StructureType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StructureType")]
	public partial class StructureType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _ParentID;
		
		private string _Name;
		
		private string _Notes;
		
		private string _MarkupType;
		
		private string _Tags;
		
		private string _StructureTags;
		
		private bool _Abstract;
		
		private int _Color;
		
		private System.Data.Linq.Binary _Version;
		
		private string _Code;
		
		private char _HotKey;
		
		private EntitySet<Structure> _Structures;
		
		private EntitySet<StructureTemplate> _StructureTemplates;
		
		private EntitySet<StructureType> _StructureTypes;
		
		private EntityRef<StructureType> _StructureType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<long> value);
    partial void OnParentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnMarkupTypeChanging(string value);
    partial void OnMarkupTypeChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnStructureTagsChanging(string value);
    partial void OnStructureTagsChanged();
    partial void OnAbstractChanging(bool value);
    partial void OnAbstractChanged();
    partial void OnColorChanging(int value);
    partial void OnColorChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnHotKeyChanging(char value);
    partial void OnHotKeyChanged();
    #endregion
		
		public StructureType()
		{
			this._Structures = new EntitySet<Structure>(new Action<Structure>(this.attach_Structures), new Action<Structure>(this.detach_Structures));
			this._StructureTemplates = new EntitySet<StructureTemplate>(new Action<StructureTemplate>(this.attach_StructureTemplates), new Action<StructureTemplate>(this.detach_StructureTemplates));
			this._StructureTypes = new EntitySet<StructureType>(new Action<StructureType>(this.attach_StructureTypes), new Action<StructureType>(this.detach_StructureTypes));
			this._StructureType1 = default(EntityRef<StructureType>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._StructureType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NChar(128) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[Column(Storage="_MarkupType", DbType="NChar(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MarkupType
		{
			get
			{
				return this._MarkupType;
			}
			set
			{
				if ((this._MarkupType != value))
				{
					this.OnMarkupTypeChanging(value);
					this.SendPropertyChanging();
					this._MarkupType = value;
					this.SendPropertyChanged("MarkupType");
					this.OnMarkupTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Tags", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[Column(Storage="_StructureTags", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string StructureTags
		{
			get
			{
				return this._StructureTags;
			}
			set
			{
				if ((this._StructureTags != value))
				{
					this.OnStructureTagsChanging(value);
					this.SendPropertyChanging();
					this._StructureTags = value;
					this.SendPropertyChanged("StructureTags");
					this.OnStructureTagsChanged();
				}
			}
		}
		
		[Column(Storage="_Abstract", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Abstract
		{
			get
			{
				return this._Abstract;
			}
			set
			{
				if ((this._Abstract != value))
				{
					this.OnAbstractChanging(value);
					this.SendPropertyChanging();
					this._Abstract = value;
					this.SendPropertyChanged("Abstract");
					this.OnAbstractChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NChar(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_HotKey", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char HotKey
		{
			get
			{
				return this._HotKey;
			}
			set
			{
				if ((this._HotKey != value))
				{
					this.OnHotKeyChanging(value);
					this.SendPropertyChanging();
					this._HotKey = value;
					this.SendPropertyChanged("HotKey");
					this.OnHotKeyChanged();
				}
			}
		}
		
		[Association(Name="StructureType_Structure", Storage="_Structures", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<Structure> Structures
		{
			get
			{
				return this._Structures;
			}
			set
			{
				this._Structures.Assign(value);
			}
		}
		
		[Association(Name="StructureType_StructureTemplate", Storage="_StructureTemplates", ThisKey="ID", OtherKey="StructureTypeID")]
		public EntitySet<StructureTemplate> StructureTemplates
		{
			get
			{
				return this._StructureTemplates;
			}
			set
			{
				this._StructureTemplates.Assign(value);
			}
		}
		
		[Association(Name="StructureType_StructureType", Storage="_StructureTypes", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<StructureType> StructureTypes
		{
			get
			{
				return this._StructureTypes;
			}
			set
			{
				this._StructureTypes.Assign(value);
			}
		}
		
		[Association(Name="StructureType_StructureType", Storage="_StructureType1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public StructureType StructureType1
		{
			get
			{
				return this._StructureType1.Entity;
			}
			set
			{
				StructureType previousValue = this._StructureType1.Entity;
				if (((previousValue != value) 
							|| (this._StructureType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StructureType1.Entity = null;
						previousValue.StructureTypes.Remove(this);
					}
					this._StructureType1.Entity = value;
					if ((value != null))
					{
						value.StructureTypes.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("StructureType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Structures(Structure entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = this;
		}
		
		private void detach_Structures(Structure entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = null;
		}
		
		private void attach_StructureTemplates(StructureTemplate entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = this;
		}
		
		private void detach_StructureTemplates(StructureTemplate entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = null;
		}
		
		private void attach_StructureTypes(StructureType entity)
		{
			this.SendPropertyChanging();
			entity.StructureType1 = this;
		}
		
		private void detach_StructureTypes(StructureType entity)
		{
			this.SendPropertyChanging();
			entity.StructureType1 = null;
		}
	}
}
#pragma warning restore 1591
