<?xml version="1.0" encoding="utf-8"?>

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	creationComplete="init()">
	  <mx:Style>
     ColumnSeries {
        showDataEffect:slideDown;
        hideDataEffect:slideDown;
     }
  </mx:Style>
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.binding.utils.BindingUtils;
			import com.adobe.serialization.json.JSON;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.charts.effects.SeriesInterpolate;
			import mx.formatters.SwitchSymbolFormatter;
			import mx.messaging.channels.HTTPChannel;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.ResultEvent;
			
		
		[Bindable]
		public var resultSet: ArrayCollection;
		
		public var completeSet: ArrayCollection;
		
		[Bindable]
		public var top:int;
		
		[Bindable]
		public var length:int;
	
		[Bindable]
		public var countries: Array= new Array();
		
		[Bindable]
		public var topArray: Array = new Array();
		
		[Bindable]
		public var filesList: ArrayCollection = new ArrayCollection();
		
		public var filesArray: ArrayCollection = new ArrayCollection();
		
		[Bindable]
		public var globalString: String;
		[Bindable]
		public var selectedFile: String;
		
		public var filesDictionary: Dictionary = new Dictionary();
		
	    public var rearrangeData:SeriesInterpolate;
	    
	    public var textCloudFormat: TextFormat = new TextFormat();
		public var textCloud: TextField = new TextField();
		public var ui:UIComponent = new UIComponent();
		public var container: Sprite = new Sprite();
		
		public var rootURL: String;
		
		public var dict:* = new Array();
		public var statsDictionary: Dictionary = new Dictionary();
		public var namesDictionary: Dictionary = new Dictionary();
		
		[Bindable]
		public var typeArray: Array = new Array();
		public var alert: Alert;
		public var host: String;
		public function init(): void
		{
			
//			getXML();
			 
//			var service: HTTPService = new HTTPService();
//			service.url =  "files/country.xml";
//			service.resultFormat = "e4x";
//			service.addEventListener(ResultEvent.RESULT,loadCountry);
//			
////		    rearrangeData = new SeriesInterpolate();
//	        rearrangeData.duration = 1000;
//	        rearrangeData.minimumElementDuration = 200;
//	        rearrangeData.elementOffset = 0
//	        
//	        labelHover.setStyle("moveBars",rearrangeData);
//			

			var regexp: RegExp = /.*\//;
			var hostregex: RegExp = /http:\/\/(.*?)\//;
			this.host =  hostregex.exec(ExternalInterface.call("window.location.href.toString"))[1];
			
			var url: String = "http://"+host+"/Viz/Structure/StatisticsJSON";
			Alert.okLabel = "Cancel";
			alert = Alert.show("Receiving data, Please wait....");
			
			var request:URLRequest = new URLRequest(url);
			var loader: URLLoader = new URLLoader(request)
			loader.addEventListener(Event.COMPLETE,onJSONLoad);	
			
			
			labelHover.displayName = "ID:";
//			filesList.addItem("Publications by Country");
//			filesList.addItem("Publications by States - US");
//			filesList.addItem("Publications by language");
//			filesList.addItem("Major Descriptors");
//			filesList.addItem("Minor Descriptors");
//			filesList.addItem("Publications by Type");
//			
//			
//		
//			filesDictionary[filesList[0]] = "countryYearFull";
//			filesDictionary[filesList[1]] = "states";
//			filesDictionary[filesList[2]] = "lang";
//			filesDictionary[filesList[3]] = "majorDescriptor";
//			filesDictionary[filesList[4]] = "minorDescriptor";
//			filesDictionary[filesList[5]] = "pubType";
//			
			
					
	
		 	
//		 	title.text = filesList[type.selectedIndex];
//		 	
//		 	labelHover.displayName = title.text;
			
		}
			
		public function updatePlotData(event: Event): void
		{
			top =10;
			topValue.selectedIndex = top -1;
			
			completeSet = new ArrayCollection();
			resultSet = new ArrayCollection();
			
			for(var key:* in statsDictionary)
			{
				if (statsDictionary[key][typeArray[type.selectedIndex]] != null)
					completeSet.addItem({name: key, number: statsDictionary[key][typeArray[type.selectedIndex]]})
			}
			globalString ="Top cells with most \'"+ typeArray[type.selectedIndex]+"\' connections";

			var dataSortField: SortField = new SortField();
			var dataSort: Sort = new Sort();
			dataSortField.name = "number";
			dataSortField.numeric = true;
			dataSortField.descending = true;					
						
			dataSort.fields = [dataSortField];
				
			completeSet.sort = dataSort;
			completeSet.refresh();
			
			var len:* = completeSet.length;
			topArray = new Array();
			for(i=1;i<=len; i++)
			{
				topArray.push(i);
			} 
			
			top = 10;
			topValue.selectedIndex = top-1;
			
			if(completeSet.length < top)
			{
				top = completeSet.length;
				topValue.selectedIndex = top-1;
			}	
			
						
			for(var i: int=0;i<=top-1;i++)
			{
				resultSet.addItem(completeSet[i]);
			}


				
		}
		
		public function updatePlot(event: Event): void
		{
			top = topValue.selectedIndex+1;
			
			resultSet.removeAll();
			
			for(var i:int =0;i<top;i++)
			{
				resultSet.addItem(completeSet[i]);		
			
			}
	
		}
		
		public function onJSONLoad(event: Event) : void
		{	
			PopUpManager.removePopUp(alert);
			var statObjects: Object = JSON.decode(event.target.data);
			
			var len: Number = statObjects.objList.length;
			
//			Alert.show(len.toString());
			
			completeSet = new ArrayCollection();
			resultSet = new ArrayCollection();
			
			for(var i: int =0 ; i<len; i++)
			{
				var statObj:* = statObjects.objList[i];
				
				var typesObj:Dictionary = new Dictionary();
				 for(var j:int =0; j<statObj.synapses.length;j++)
				 {
				 	
				 	var ans:Array =statObj.synapses[j].split(",");
				 	typesObj[ans[0]] = int(ans[1]);
				 	if (namesDictionary[ans[0]] == null)
				 	{
				 		namesDictionary[ans[0]] = 0;
				 	}
				 
				 }
				 
				 statsDictionary[statObj.id] = typesObj;
				
			
			}
			
			resultSet = new ArrayCollection();
			
			for(var tmp:* in namesDictionary)
				typeArray.push(tmp);
			
			for(i=0;i<typeArray.length;i++)
			{
				if(typeArray[i] == "Total")
					break;
			}
			type.selectedIndex = i;
			
			globalString = "Top cells with most \'"+typeArray[i]+"\' connections";

			
			for(i=1;i<=50 ; i++)
			{
				topArray.push(i);
			} 
			
			top =10;
			topValue.selectedIndex = top -1;
			
			for(var key:* in statsDictionary)
			{
				completeSet.addItem({name: key, number: statsDictionary[key][typeArray[type.selectedIndex]]})
			}
			var dataSortField: SortField = new SortField();
			var dataSort: Sort = new Sort();
			dataSortField.name = "number";
			dataSortField.numeric = true;
			dataSortField.descending = true;					
						
			dataSort.fields = [dataSortField];
				
			completeSet.sort = dataSort;
			completeSet.refresh();
			
			for(i=0;i<=top-1;i++)
			{
				resultSet.addItem(completeSet[i]);
			}
			
			//					
//			completeSet = new ArrayCollection();
//			resultSet =  new ArrayCollection();
//			topArray = new Array();
//			
////			length = event.result.result.length();
//			
////			labelHover.displayName = title.text;
//			
//			top = 10;
//			
//			for(var i:int =1;i<=length ; i++)
//			{
//				topArray.push(i);
//			} 
//					
//			topValue.selectedIndex = top-1;
//			
//			
//			for(i =0;i<length;i++)
//			{
////				completeSet.addItem({name: event.result.result.name.text()[i],
////											number: int(event.result.result.number.text()[i])});		
//			
//			}
//					
//			for(i=0;i<top;i++)
//			{
////				resultSet.addItem({name: event.result.result.name.text()[i],
////											number: event.result.result.number.text()[i]});		
//			
//			}
			
		
		}
		private function displayValues(data:Object, field:String, index:Number, percentValue:Number):String
		 {
	        var temp:String= (" " + percentValue).substr(0,6);
	        return data.name + ": " + '\n' + "Total: " + data.number + '\n' + temp + "%";
  		  }
  		  
  		  
  		 
	private function rollOverCloudElement(e:MouseEvent):void{
			e.target.textColor = 0x666666;
		}
		private function rollOutCloudElement(e:MouseEvent):void{
			e.target.textColor = 0x115558;
		}
		private function clickCloudElement(e:MouseEvent):void{
			navigateToURL(new URLRequest("http://search.twitter.com/search?q="+e.target.text),"_blank");
		
  		 }
  		  
  		  
		]]>
	</mx:Script>
		
	
<mx:SeriesInterpolate id="changeEffect" duration="2000" minimumElementDuration="20" elementOffset="0"/>	
<!--	 Define chart effect. 
  <mx:SeriesSlide 
    duration="700" 
    direction="down"
    minimumElementDuration="20" 
    elementOffset="20" 
    id="slideDown"
  />-->
  
    <mx:Stroke id="callouts" weight="2" color="0x999999" alpha=".8" caps="square"/>
    
    <mx:Stroke id="radial" weight="1" color="0xFFFFCC" alpha=".3"/>

    <mx:Stroke id="pieborder" color="0x000000" weight="2" alpha=".5"/>

	
	<mx:VBox verticalGap="0" verticalAlign="middle"  percentWidth="100" percentHeight="100" horizontalAlign="center">
	
    <mx:ControlBar verticalAlign="middle" horizontalAlign="center">
           <mx:Label text="Synapses Statistics" fontWeight="bold" fontSize="13" textAlign="left" textDecoration="underline"/>
           <mx:Label text="Type of Synapse or Gap Junction" fontSize="11" fontStyle="normal" fontWeight="bold"/>
           <mx:ComboBox width="273" dataProvider="{typeArray}" id="type" change="updatePlotData(event)" fontSize="11"></mx:ComboBox>
           <mx:Label text="&amp; only show top" fontSize="11" fontWeight="bold" id="topValueLabel"/>
           <mx:ComboBox width="93" dataProvider="{topArray}" id="topValue" change="updatePlot(event)" fontSize="11"></mx:ComboBox>
           <mx:Label text="Structures" fontSize="11" fontWeight="bold" id="topValueLabel0"/>
    </mx:ControlBar>
    <mx:TabNavigator borderStyle="solid" percentWidth="100" percentHeight="100" paddingLeft="5" paddingRight="5" paddingBottom="5" id="tab">

        <mx:Canvas label="Bar Chart"  percentWidth="100" percentHeight="100" id="barchart" cornerRadius="19" fontSize="11">
        	<mx:ColumnChart dataProvider="{resultSet}" id="testChart"  percentWidth="100" percentHeight="100" showDataTips="true">
        	<mx:verticalAxis>
           <mx:LinearAxis id="va1" title="No. of Synapses/Connections"/>
        </mx:verticalAxis>
  
                <mx:horizontalAxis>  
                    <mx:CategoryAxis dataProvider="{resultSet}" categoryField="name" title="Structure ID" />  
                </mx:horizontalAxis>  
                <mx:series>  
                    <mx:ColumnSeries xField="name" yField="number" id="labelHover" showDataEffect="{changeEffect}" />                      
                </mx:series> 
                       <mx:verticalAxisRenderers>
                <mx:AxisRenderer 
                    axis="{va1}" 
                    canDropLabels="true"                    
                    verticalAxisTitleAlignment="vertical"
                />
            </mx:verticalAxisRenderers> 
            </mx:ColumnChart>
                  <mx:Label text="{globalString}" fontWeight="bold" fontSize="13" x="426.5" y="10"/>
   
        </mx:Canvas>
        
        <mx:Canvas label="Pie chart" id="piechart">
        <mx:PieChart id="chart" 
            height="100%" 
            width="100%"
            paddingRight="5" 
            paddingLeft="5" 
            showDataTips="true" 
            dataProvider="{resultSet}"
        >          
            <!--
            -->
            <mx:series>
                <mx:PieSeries 
                    nameField="name"
                    labelPosition="callout" 
                    field="number" 
                    labelFunction="displayValues" 
                    calloutStroke="{callouts}" 
                    radialStroke="{radial}" 
                    stroke="{pieborder}"
                                 
                >
                 <mx:showDataEffect>
                    <mx:SeriesInterpolate duration="1500" />
                </mx:showDataEffect>
                    <mx:filters>
                        <mx:Array/>
                    </mx:filters>
                </mx:PieSeries>
            </mx:series>
        </mx:PieChart>  
        <mx:Legend dataProvider="{chart}"/>
        </mx:Canvas>
    
    </mx:TabNavigator>
    </mx:VBox>
</mx:Application>