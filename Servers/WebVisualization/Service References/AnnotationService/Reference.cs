//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConnectomeViz.AnnotationService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataObject", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.StructureLink))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.LocationLink))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.DataObjectWithKeyOflong))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.Location))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.LocationPositionOnly))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.DataObjectWithParentOflong))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.Structure))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.StructureType))]
    public partial class DataObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.DBACTION DBActionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.DBACTION DBAction {
            get {
                return this.DBActionField;
            }
            set {
                if ((this.DBActionField.Equals(value) != true)) {
                    this.DBActionField = value;
                    this.RaisePropertyChanged("DBAction");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructureLink", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    public partial class StructureLink : ConnectomeViz.AnnotationService.DataObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BidirectionalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SourceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TargetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Bidirectional {
            get {
                return this.BidirectionalField;
            }
            set {
                if ((this.BidirectionalField.Equals(value) != true)) {
                    this.BidirectionalField = value;
                    this.RaisePropertyChanged("Bidirectional");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SourceID {
            get {
                return this.SourceIDField;
            }
            set {
                if ((this.SourceIDField.Equals(value) != true)) {
                    this.SourceIDField = value;
                    this.RaisePropertyChanged("SourceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TargetID {
            get {
                return this.TargetIDField;
            }
            set {
                if ((this.TargetIDField.Equals(value) != true)) {
                    this.TargetIDField = value;
                    this.RaisePropertyChanged("TargetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationLink", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    public partial class LocationLink : ConnectomeViz.AnnotationService.DataObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SourceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TargetIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SourceID {
            get {
                return this.SourceIDField;
            }
            set {
                if ((this.SourceIDField.Equals(value) != true)) {
                    this.SourceIDField = value;
                    this.RaisePropertyChanged("SourceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TargetID {
            get {
                return this.TargetIDField;
            }
            set {
                if ((this.TargetIDField.Equals(value) != true)) {
                    this.TargetIDField = value;
                    this.RaisePropertyChanged("TargetID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataObjectWithKeyOflong", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.Location))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.LocationPositionOnly))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.DataObjectWithParentOflong))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.Structure))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.StructureType))]
    public partial class DataObjectWithKeyOflong : ConnectomeViz.AnnotationService.DataObject {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    public partial class Location : ConnectomeViz.AnnotationService.DataObjectWithKeyOflong {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributesXmlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ClosedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LastModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] LinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OffEdgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ParentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.AnnotationPoint PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SectionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] TagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TerminalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private short TypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.AnnotationPoint[] VerticiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.AnnotationPoint VolumePositionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttributesXml {
            get {
                return this.AttributesXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesXmlField, value) != true)) {
                    this.AttributesXmlField = value;
                    this.RaisePropertyChanged("AttributesXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Closed {
            get {
                return this.ClosedField;
            }
            set {
                if ((this.ClosedField.Equals(value) != true)) {
                    this.ClosedField = value;
                    this.RaisePropertyChanged("Closed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long LastModified {
            get {
                return this.LastModifiedField;
            }
            set {
                if ((this.LastModifiedField.Equals(value) != true)) {
                    this.LastModifiedField = value;
                    this.RaisePropertyChanged("LastModified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] Links {
            get {
                return this.LinksField;
            }
            set {
                if ((object.ReferenceEquals(this.LinksField, value) != true)) {
                    this.LinksField = value;
                    this.RaisePropertyChanged("Links");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OffEdge {
            get {
                return this.OffEdgeField;
            }
            set {
                if ((this.OffEdgeField.Equals(value) != true)) {
                    this.OffEdgeField = value;
                    this.RaisePropertyChanged("OffEdge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ParentID {
            get {
                return this.ParentIDField;
            }
            set {
                if ((this.ParentIDField.Equals(value) != true)) {
                    this.ParentIDField = value;
                    this.RaisePropertyChanged("ParentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.AnnotationPoint Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Section {
            get {
                return this.SectionField;
            }
            set {
                if ((this.SectionField.Equals(value) != true)) {
                    this.SectionField = value;
                    this.RaisePropertyChanged("Section");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Terminal {
            get {
                return this.TerminalField;
            }
            set {
                if ((this.TerminalField.Equals(value) != true)) {
                    this.TerminalField = value;
                    this.RaisePropertyChanged("Terminal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public short TypeCode {
            get {
                return this.TypeCodeField;
            }
            set {
                if ((this.TypeCodeField.Equals(value) != true)) {
                    this.TypeCodeField = value;
                    this.RaisePropertyChanged("TypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.AnnotationPoint[] Verticies {
            get {
                return this.VerticiesField;
            }
            set {
                if ((object.ReferenceEquals(this.VerticiesField, value) != true)) {
                    this.VerticiesField = value;
                    this.RaisePropertyChanged("Verticies");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.AnnotationPoint VolumePosition {
            get {
                return this.VolumePositionField;
            }
            set {
                if ((this.VolumePositionField.Equals(value) != true)) {
                    this.VolumePositionField = value;
                    this.RaisePropertyChanged("VolumePosition");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationPositionOnly", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    public partial class LocationPositionOnly : ConnectomeViz.AnnotationService.DataObjectWithKeyOflong {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.AnnotationPoint PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.AnnotationPoint Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataObjectWithParentOflong", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.Structure))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ConnectomeViz.AnnotationService.StructureType))]
    public partial class DataObjectWithParentOflong : ConnectomeViz.AnnotationService.DataObjectWithKeyOflong {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<long> ParentIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<long> ParentID {
            get {
                return this.ParentIDField;
            }
            set {
                if ((this.ParentIDField.Equals(value) != true)) {
                    this.ParentIDField = value;
                    this.RaisePropertyChanged("ParentID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Structure", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    public partial class Structure : ConnectomeViz.AnnotationService.DataObjectWithParentOflong {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributesXmlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] ChildIDsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ConfidenceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LabelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.StructureLink[] LinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool VerifiedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttributesXml {
            get {
                return this.AttributesXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributesXmlField, value) != true)) {
                    this.AttributesXmlField = value;
                    this.RaisePropertyChanged("AttributesXml");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] ChildIDs {
            get {
                return this.ChildIDsField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildIDsField, value) != true)) {
                    this.ChildIDsField = value;
                    this.RaisePropertyChanged("ChildIDs");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Confidence {
            get {
                return this.ConfidenceField;
            }
            set {
                if ((this.ConfidenceField.Equals(value) != true)) {
                    this.ConfidenceField = value;
                    this.RaisePropertyChanged("Confidence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.StructureLink[] Links {
            get {
                return this.LinksField;
            }
            set {
                if ((object.ReferenceEquals(this.LinksField, value) != true)) {
                    this.LinksField = value;
                    this.RaisePropertyChanged("Links");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TypeID {
            get {
                return this.TypeIDField;
            }
            set {
                if ((this.TypeIDField.Equals(value) != true)) {
                    this.TypeIDField = value;
                    this.RaisePropertyChanged("TypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Verified {
            get {
                return this.VerifiedField;
            }
            set {
                if ((this.VerifiedField.Equals(value) != true)) {
                    this.VerifiedField = value;
                    this.RaisePropertyChanged("Verified");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StructureType", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    public partial class StructureType : ConnectomeViz.AnnotationService.DataObjectWithParentOflong {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AbstractField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char HotKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MarkupTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] StructureTagsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] TagsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Abstract {
            get {
                return this.AbstractField;
            }
            set {
                if ((this.AbstractField.Equals(value) != true)) {
                    this.AbstractField = value;
                    this.RaisePropertyChanged("Abstract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Color {
            get {
                return this.ColorField;
            }
            set {
                if ((this.ColorField.Equals(value) != true)) {
                    this.ColorField = value;
                    this.RaisePropertyChanged("Color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char HotKey {
            get {
                return this.HotKeyField;
            }
            set {
                if ((this.HotKeyField.Equals(value) != true)) {
                    this.HotKeyField = value;
                    this.RaisePropertyChanged("HotKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MarkupType {
            get {
                return this.MarkupTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MarkupTypeField, value) != true)) {
                    this.MarkupTypeField = value;
                    this.RaisePropertyChanged("MarkupType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] StructureTags {
            get {
                return this.StructureTagsField;
            }
            set {
                if ((object.ReferenceEquals(this.StructureTagsField, value) != true)) {
                    this.StructureTagsField = value;
                    this.RaisePropertyChanged("StructureTags");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Tags {
            get {
                return this.TagsField;
            }
            set {
                if ((object.ReferenceEquals(this.TagsField, value) != true)) {
                    this.TagsField = value;
                    this.RaisePropertyChanged("Tags");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DBACTION", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    public enum DBACTION : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NONE = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        INSERT = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UPDATE = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DELETE = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnnotationPoint", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    public partial struct AnnotationPoint : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ZField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Z {
            get {
                return this.ZField;
            }
            set {
                if ((this.ZField.Equals(value) != true)) {
                    this.ZField = value;
                    this.RaisePropertyChanged("Z");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateStructureRetval", Namespace="http://schemas.datacontract.org/2004/07/Annotation")]
    [System.SerializableAttribute()]
    public partial class CreateStructureRetval : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.Location locationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.Structure structureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.Location location {
            get {
                return this.locationField;
            }
            set {
                if ((object.ReferenceEquals(this.locationField, value) != true)) {
                    this.locationField = value;
                    this.RaisePropertyChanged("location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.Structure structure {
            get {
                return this.structureField;
            }
            set {
                if ((object.ReferenceEquals(this.structureField, value) != true)) {
                    this.structureField = value;
                    this.RaisePropertyChanged("structure");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Graphx", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Graphx : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.Edgex[] EdgeListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] FrontierNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] InvolvedCellsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<long, ConnectomeViz.AnnotationService.Structure> NodeListField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] ReducedEdgesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long[] _FrontierNodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<long, ConnectomeViz.AnnotationService.LocationInfo> locationInfoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<long, long> zLocationForSynapsesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.Edgex[] EdgeList {
            get {
                return this.EdgeListField;
            }
            set {
                if ((object.ReferenceEquals(this.EdgeListField, value) != true)) {
                    this.EdgeListField = value;
                    this.RaisePropertyChanged("EdgeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] FrontierNodes {
            get {
                return this.FrontierNodesField;
            }
            set {
                if ((object.ReferenceEquals(this.FrontierNodesField, value) != true)) {
                    this.FrontierNodesField = value;
                    this.RaisePropertyChanged("FrontierNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] InvolvedCells {
            get {
                return this.InvolvedCellsField;
            }
            set {
                if ((object.ReferenceEquals(this.InvolvedCellsField, value) != true)) {
                    this.InvolvedCellsField = value;
                    this.RaisePropertyChanged("InvolvedCells");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<long, ConnectomeViz.AnnotationService.Structure> NodeList {
            get {
                return this.NodeListField;
            }
            set {
                if ((object.ReferenceEquals(this.NodeListField, value) != true)) {
                    this.NodeListField = value;
                    this.RaisePropertyChanged("NodeList");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] ReducedEdges {
            get {
                return this.ReducedEdgesField;
            }
            set {
                if ((object.ReferenceEquals(this.ReducedEdgesField, value) != true)) {
                    this.ReducedEdgesField = value;
                    this.RaisePropertyChanged("ReducedEdges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long[] _FrontierNodes {
            get {
                return this._FrontierNodesField;
            }
            set {
                if ((object.ReferenceEquals(this._FrontierNodesField, value) != true)) {
                    this._FrontierNodesField = value;
                    this.RaisePropertyChanged("_FrontierNodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<long, ConnectomeViz.AnnotationService.LocationInfo> locationInfo {
            get {
                return this.locationInfoField;
            }
            set {
                if ((object.ReferenceEquals(this.locationInfoField, value) != true)) {
                    this.locationInfoField = value;
                    this.RaisePropertyChanged("locationInfo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<long, long> zLocationForSynapses {
            get {
                return this.zLocationForSynapsesField;
            }
            set {
                if ((object.ReferenceEquals(this.zLocationForSynapsesField, value) != true)) {
                    this.zLocationForSynapsesField = value;
                    this.RaisePropertyChanged("zLocationForSynapses");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Edgex", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Edgex : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.StructureLink LinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SourceIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SourceParentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceTypeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TargetIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TargetParentIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.StructureLink Link {
            get {
                return this.LinkField;
            }
            set {
                if ((object.ReferenceEquals(this.LinkField, value) != true)) {
                    this.LinkField = value;
                    this.RaisePropertyChanged("Link");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SourceID {
            get {
                return this.SourceIDField;
            }
            set {
                if ((this.SourceIDField.Equals(value) != true)) {
                    this.SourceIDField = value;
                    this.RaisePropertyChanged("SourceID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SourceParentID {
            get {
                return this.SourceParentIDField;
            }
            set {
                if ((this.SourceParentIDField.Equals(value) != true)) {
                    this.SourceParentIDField = value;
                    this.RaisePropertyChanged("SourceParentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceTypeName {
            get {
                return this.SourceTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceTypeNameField, value) != true)) {
                    this.SourceTypeNameField = value;
                    this.RaisePropertyChanged("SourceTypeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TargetID {
            get {
                return this.TargetIDField;
            }
            set {
                if ((this.TargetIDField.Equals(value) != true)) {
                    this.TargetIDField = value;
                    this.RaisePropertyChanged("TargetID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TargetParentID {
            get {
                return this.TargetParentIDField;
            }
            set {
                if ((this.TargetParentIDField.Equals(value) != true)) {
                    this.TargetParentIDField = value;
                    this.RaisePropertyChanged("TargetParentID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocationInfo", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class LocationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RadiusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ZField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Radius {
            get {
                return this.RadiusField;
            }
            set {
                if ((this.RadiusField.Equals(value) != true)) {
                    this.RadiusField = value;
                    this.RaisePropertyChanged("Radius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Z {
            get {
                return this.ZField;
            }
            set {
                if ((this.ZField.Equals(value) != true)) {
                    this.ZField = value;
                    this.RaisePropertyChanged("Z");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SynapseObject", Namespace="http://schemas.datacontract.org/2004/07/Annotation.Service.GraphClasses")]
    [System.SerializableAttribute()]
    public partial class SynapseObject : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ConnectomeViz.AnnotationService.SynapseStats[] objListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ConnectomeViz.AnnotationService.SynapseStats[] objList {
            get {
                return this.objListField;
            }
            set {
                if ((object.ReferenceEquals(this.objListField, value) != true)) {
                    this.objListField = value;
                    this.RaisePropertyChanged("objList");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SynapseStats", Namespace="http://schemas.datacontract.org/2004/07/Annotation.Service.GraphClasses")]
    [System.SerializableAttribute()]
    public partial class SynapseStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] synapsesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] synapses {
            get {
                return this.synapsesField;
            }
            set {
                if ((object.ReferenceEquals(this.synapsesField, value) != true)) {
                    this.synapsesField = value;
                    this.RaisePropertyChanged("synapses");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AnnotationService.IAnnotateStructureTypes")]
    public interface IAnnotateStructureTypes {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/CreateStructureType", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/CreateStructureTypeResponse")]
        ConnectomeViz.AnnotationService.StructureType CreateStructureType(ConnectomeViz.AnnotationService.StructureType obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypes", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypesResponse")]
        ConnectomeViz.AnnotationService.StructureType[] GetStructureTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypeByID", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypeByIDResponse")]
        ConnectomeViz.AnnotationService.StructureType GetStructureTypeByID(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypesByIDs", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/GetStructureTypesByIDsResponse")]
        ConnectomeViz.AnnotationService.StructureType[] GetStructureTypesByIDs(long[] IDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/UpdateStructureTypes", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/UpdateStructureTypesResponse")]
        long[] UpdateStructureTypes(ConnectomeViz.AnnotationService.StructureType[] structType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructureTypes/TestMethod", ReplyAction="http://tempuri.org/IAnnotateStructureTypes/TestMethodResponse")]
        string TestMethod();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnnotateStructureTypesChannel : ConnectomeViz.AnnotationService.IAnnotateStructureTypes, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnnotateStructureTypesClient : System.ServiceModel.ClientBase<ConnectomeViz.AnnotationService.IAnnotateStructureTypes>, ConnectomeViz.AnnotationService.IAnnotateStructureTypes {
        
        public AnnotateStructureTypesClient() {
        }
        
        public AnnotateStructureTypesClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnnotateStructureTypesClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateStructureTypesClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateStructureTypesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConnectomeViz.AnnotationService.StructureType CreateStructureType(ConnectomeViz.AnnotationService.StructureType obj) {
            return base.Channel.CreateStructureType(obj);
        }
        
        public ConnectomeViz.AnnotationService.StructureType[] GetStructureTypes() {
            return base.Channel.GetStructureTypes();
        }
        
        public ConnectomeViz.AnnotationService.StructureType GetStructureTypeByID(long ID) {
            return base.Channel.GetStructureTypeByID(ID);
        }
        
        public ConnectomeViz.AnnotationService.StructureType[] GetStructureTypesByIDs(long[] IDs) {
            return base.Channel.GetStructureTypesByIDs(IDs);
        }
        
        public long[] UpdateStructureTypes(ConnectomeViz.AnnotationService.StructureType[] structType) {
            return base.Channel.UpdateStructureTypes(structType);
        }
        
        public string TestMethod() {
            return base.Channel.TestMethod();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AnnotationService.IAnnotateStructures")]
    public interface IAnnotateStructures {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/CreateStructure", ReplyAction="http://tempuri.org/IAnnotateStructures/CreateStructureResponse")]
        ConnectomeViz.AnnotationService.CreateStructureRetval CreateStructure(ConnectomeViz.AnnotationService.Structure structure, ConnectomeViz.AnnotationService.Location location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresResponse")]
        ConnectomeViz.AnnotationService.Structure[] GetStructures();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructuresForSection", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresForSectionResponse")]
        ConnectomeViz.AnnotationService.Structure[] GetStructuresForSection(out long QueryExecutedTime, out long[] DeletedIDs, long Section, long ModifiedAfterThisTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructureByID", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructureByIDResponse")]
        ConnectomeViz.AnnotationService.Structure GetStructureByID(long ID, bool IncludeChildren);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructuresByIDs", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresByIDsResponse")]
        ConnectomeViz.AnnotationService.Structure[] GetStructuresByIDs(long[] ID, bool IncludeChildren);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/CreateStructureLink", ReplyAction="http://tempuri.org/IAnnotateStructures/CreateStructureLinkResponse")]
        ConnectomeViz.AnnotationService.StructureLink CreateStructureLink(ConnectomeViz.AnnotationService.StructureLink link);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetLinkedStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/GetLinkedStructuresResponse")]
        ConnectomeViz.AnnotationService.StructureLink[] GetLinkedStructures();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetLinkedStructuresByID", ReplyAction="http://tempuri.org/IAnnotateStructures/GetLinkedStructuresByIDResponse")]
        ConnectomeViz.AnnotationService.StructureLink[] GetLinkedStructuresByID(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/NumberOfLocationsForStructure", ReplyAction="http://tempuri.org/IAnnotateStructures/NumberOfLocationsForStructureResponse")]
        long NumberOfLocationsForStructure(long structureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/UpdateStructures", ReplyAction="http://tempuri.org/IAnnotateStructures/UpdateStructuresResponse")]
        long[] UpdateStructures(ConnectomeViz.AnnotationService.Structure[] structure);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/UpdateStructureLinks", ReplyAction="http://tempuri.org/IAnnotateStructures/UpdateStructureLinksResponse")]
        void UpdateStructureLinks(ConnectomeViz.AnnotationService.StructureLink[] structureLinks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocations", ReplyAction="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocationsResponse")]
        long[] GetUnfinishedLocations(long structureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocationsWithPosition", ReplyAction="http://tempuri.org/IAnnotateStructures/GetUnfinishedLocationsWithPositionResponse" +
            "")]
        ConnectomeViz.AnnotationService.LocationPositionOnly[] GetUnfinishedLocationsWithPosition(long structureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/GetStructuresOfType", ReplyAction="http://tempuri.org/IAnnotateStructures/GetStructuresOfTypeResponse")]
        ConnectomeViz.AnnotationService.Structure[] GetStructuresOfType(long typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/Merge", ReplyAction="http://tempuri.org/IAnnotateStructures/MergeResponse")]
        long Merge(long KeepID, long MergeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateStructures/Split", ReplyAction="http://tempuri.org/IAnnotateStructures/SplitResponse")]
        long Split(long StructureA, ConnectomeViz.AnnotationService.LocationLink locLink);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnnotateStructuresChannel : ConnectomeViz.AnnotationService.IAnnotateStructures, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnnotateStructuresClient : System.ServiceModel.ClientBase<ConnectomeViz.AnnotationService.IAnnotateStructures>, ConnectomeViz.AnnotationService.IAnnotateStructures {
        
        public AnnotateStructuresClient() {
        }
        
        public AnnotateStructuresClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnnotateStructuresClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateStructuresClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateStructuresClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConnectomeViz.AnnotationService.CreateStructureRetval CreateStructure(ConnectomeViz.AnnotationService.Structure structure, ConnectomeViz.AnnotationService.Location location) {
            return base.Channel.CreateStructure(structure, location);
        }
        
        public ConnectomeViz.AnnotationService.Structure[] GetStructures() {
            return base.Channel.GetStructures();
        }
        
        public ConnectomeViz.AnnotationService.Structure[] GetStructuresForSection(out long QueryExecutedTime, out long[] DeletedIDs, long Section, long ModifiedAfterThisTime) {
            return base.Channel.GetStructuresForSection(out QueryExecutedTime, out DeletedIDs, Section, ModifiedAfterThisTime);
        }
        
        public ConnectomeViz.AnnotationService.Structure GetStructureByID(long ID, bool IncludeChildren) {
            return base.Channel.GetStructureByID(ID, IncludeChildren);
        }
        
        public ConnectomeViz.AnnotationService.Structure[] GetStructuresByIDs(long[] ID, bool IncludeChildren) {
            return base.Channel.GetStructuresByIDs(ID, IncludeChildren);
        }
        
        public ConnectomeViz.AnnotationService.StructureLink CreateStructureLink(ConnectomeViz.AnnotationService.StructureLink link) {
            return base.Channel.CreateStructureLink(link);
        }
        
        public ConnectomeViz.AnnotationService.StructureLink[] GetLinkedStructures() {
            return base.Channel.GetLinkedStructures();
        }
        
        public ConnectomeViz.AnnotationService.StructureLink[] GetLinkedStructuresByID(long ID) {
            return base.Channel.GetLinkedStructuresByID(ID);
        }
        
        public long NumberOfLocationsForStructure(long structureID) {
            return base.Channel.NumberOfLocationsForStructure(structureID);
        }
        
        public long[] UpdateStructures(ConnectomeViz.AnnotationService.Structure[] structure) {
            return base.Channel.UpdateStructures(structure);
        }
        
        public void UpdateStructureLinks(ConnectomeViz.AnnotationService.StructureLink[] structureLinks) {
            base.Channel.UpdateStructureLinks(structureLinks);
        }
        
        public long[] GetUnfinishedLocations(long structureID) {
            return base.Channel.GetUnfinishedLocations(structureID);
        }
        
        public ConnectomeViz.AnnotationService.LocationPositionOnly[] GetUnfinishedLocationsWithPosition(long structureID) {
            return base.Channel.GetUnfinishedLocationsWithPosition(structureID);
        }
        
        public ConnectomeViz.AnnotationService.Structure[] GetStructuresOfType(long typeID) {
            return base.Channel.GetStructuresOfType(typeID);
        }
        
        public long Merge(long KeepID, long MergeID) {
            return base.Channel.Merge(KeepID, MergeID);
        }
        
        public long Split(long StructureA, ConnectomeViz.AnnotationService.LocationLink locLink) {
            return base.Channel.Split(StructureA, locLink);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AnnotationService.IAnnotateLocations")]
    public interface IAnnotateLocations {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/CreateLocation", ReplyAction="http://tempuri.org/IAnnotateLocations/CreateLocationResponse")]
        ConnectomeViz.AnnotationService.Location CreateLocation(ConnectomeViz.AnnotationService.Location obj, long[] LinkedIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationByID", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationByIDResponse")]
        ConnectomeViz.AnnotationService.Location GetLocationByID(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationsByID", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationsByIDResponse")]
        ConnectomeViz.AnnotationService.Location[] GetLocationsByID(long[] IDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLastModifiedLocation", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLastModifiedLocationResponse")]
        ConnectomeViz.AnnotationService.Location GetLastModifiedLocation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLinkedLocations", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLinkedLocationsResponse")]
        long[] GetLinkedLocations(long ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationsForSection", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationsForSectionResponse")]
        ConnectomeViz.AnnotationService.Location[] GetLocationsForSection(out long QueryExecutedTime, long section);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationsForStructure", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationsForStructureResponse")]
        ConnectomeViz.AnnotationService.Location[] GetLocationsForStructure(long structureID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/GetLocationChanges", ReplyAction="http://tempuri.org/IAnnotateLocations/GetLocationChangesResponse")]
        ConnectomeViz.AnnotationService.Location[] GetLocationChanges(out long QueryExecutedTime, out long[] DeletedIDs, long section, long ModifiedAfterThisTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/Update", ReplyAction="http://tempuri.org/IAnnotateLocations/UpdateResponse")]
        long[] Update(ConnectomeViz.AnnotationService.Location[] locations);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/CreateLocationLink", ReplyAction="http://tempuri.org/IAnnotateLocations/CreateLocationLinkResponse")]
        void CreateLocationLink(long SourceID, long TargetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/DeleteLocationLink", ReplyAction="http://tempuri.org/IAnnotateLocations/DeleteLocationLinkResponse")]
        void DeleteLocationLink(long SourceID, long TargetID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnnotateLocations/LocationLinksForSection", ReplyAction="http://tempuri.org/IAnnotateLocations/LocationLinksForSectionResponse")]
        ConnectomeViz.AnnotationService.LocationLink[] LocationLinksForSection(out long QueryExecutedTime, out ConnectomeViz.AnnotationService.LocationLink[] DeletedLinks, long section, long ModifiedAfterThisTime);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnnotateLocationsChannel : ConnectomeViz.AnnotationService.IAnnotateLocations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnnotateLocationsClient : System.ServiceModel.ClientBase<ConnectomeViz.AnnotationService.IAnnotateLocations>, ConnectomeViz.AnnotationService.IAnnotateLocations {
        
        public AnnotateLocationsClient() {
        }
        
        public AnnotateLocationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnnotateLocationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateLocationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnnotateLocationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConnectomeViz.AnnotationService.Location CreateLocation(ConnectomeViz.AnnotationService.Location obj, long[] LinkedIDs) {
            return base.Channel.CreateLocation(obj, LinkedIDs);
        }
        
        public ConnectomeViz.AnnotationService.Location GetLocationByID(long ID) {
            return base.Channel.GetLocationByID(ID);
        }
        
        public ConnectomeViz.AnnotationService.Location[] GetLocationsByID(long[] IDs) {
            return base.Channel.GetLocationsByID(IDs);
        }
        
        public ConnectomeViz.AnnotationService.Location GetLastModifiedLocation() {
            return base.Channel.GetLastModifiedLocation();
        }
        
        public long[] GetLinkedLocations(long ID) {
            return base.Channel.GetLinkedLocations(ID);
        }
        
        public ConnectomeViz.AnnotationService.Location[] GetLocationsForSection(out long QueryExecutedTime, long section) {
            return base.Channel.GetLocationsForSection(out QueryExecutedTime, section);
        }
        
        public ConnectomeViz.AnnotationService.Location[] GetLocationsForStructure(long structureID) {
            return base.Channel.GetLocationsForStructure(structureID);
        }
        
        public ConnectomeViz.AnnotationService.Location[] GetLocationChanges(out long QueryExecutedTime, out long[] DeletedIDs, long section, long ModifiedAfterThisTime) {
            return base.Channel.GetLocationChanges(out QueryExecutedTime, out DeletedIDs, section, ModifiedAfterThisTime);
        }
        
        public long[] Update(ConnectomeViz.AnnotationService.Location[] locations) {
            return base.Channel.Update(locations);
        }
        
        public void CreateLocationLink(long SourceID, long TargetID) {
            base.Channel.CreateLocationLink(SourceID, TargetID);
        }
        
        public void DeleteLocationLink(long SourceID, long TargetID) {
            base.Channel.DeleteLocationLink(SourceID, TargetID);
        }
        
        public ConnectomeViz.AnnotationService.LocationLink[] LocationLinksForSection(out long QueryExecutedTime, out ConnectomeViz.AnnotationService.LocationLink[] DeletedLinks, long section, long ModifiedAfterThisTime) {
            return base.Channel.LocationLinksForSection(out QueryExecutedTime, out DeletedLinks, section, ModifiedAfterThisTime);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AnnotationService.ICircuit")]
    public interface ICircuit {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getGraph", ReplyAction="http://tempuri.org/ICircuit/getGraphResponse")]
        ConnectomeViz.AnnotationService.Graphx getGraph(int cellID, int numHops);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getStructuresByTypeID", ReplyAction="http://tempuri.org/ICircuit/getStructuresByTypeIDResponse")]
        long[] getStructuresByTypeID(int typeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getSynapses", ReplyAction="http://tempuri.org/ICircuit/getSynapsesResponse")]
        string[] getSynapses(int cellID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getSynapseStats", ReplyAction="http://tempuri.org/ICircuit/getSynapseStatsResponse")]
        ConnectomeViz.AnnotationService.SynapseObject getSynapseStats();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getTopConnectedStructures", ReplyAction="http://tempuri.org/ICircuit/getTopConnectedStructuresResponse")]
        string[] getTopConnectedStructures(int num);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICircuit/getTopConnectedCells", ReplyAction="http://tempuri.org/ICircuit/getTopConnectedCellsResponse")]
        string[] getTopConnectedCells();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICircuitChannel : ConnectomeViz.AnnotationService.ICircuit, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CircuitClient : System.ServiceModel.ClientBase<ConnectomeViz.AnnotationService.ICircuit>, ConnectomeViz.AnnotationService.ICircuit {
        
        public CircuitClient() {
        }
        
        public CircuitClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CircuitClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CircuitClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CircuitClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConnectomeViz.AnnotationService.Graphx getGraph(int cellID, int numHops) {
            return base.Channel.getGraph(cellID, numHops);
        }
        
        public long[] getStructuresByTypeID(int typeID) {
            return base.Channel.getStructuresByTypeID(typeID);
        }
        
        public string[] getSynapses(int cellID) {
            return base.Channel.getSynapses(cellID);
        }
        
        public ConnectomeViz.AnnotationService.SynapseObject getSynapseStats() {
            return base.Channel.getSynapseStats();
        }
        
        public string[] getTopConnectedStructures(int num) {
            return base.Channel.getTopConnectedStructures(num);
        }
        
        public string[] getTopConnectedCells() {
            return base.Channel.getTopConnectedCells();
        }
    }
}
