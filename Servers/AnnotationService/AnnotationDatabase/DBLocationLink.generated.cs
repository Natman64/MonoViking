#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;


namespace Annotation.Database
{	
	[Table(Name=@"dbo.LocationLink")]
	public partial class DBLocationLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public DBLocationLink()
		{
			_SourceLocation = default(EntityRef<DBLocation>); 
			_TargetLocation = default(EntityRef<DBLocation>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnLinkedFromChanging(long value);
		partial void OnLinkedFromChanged();
		private long _Source;
		[Column(Storage=@"_Source", Name=@"A", DbType=@"BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long LinkedFrom
		{
			get { return _Source; }
			set {
				if (_Source != value) {
					if (_SourceLocation.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnLinkedFromChanging(value);
					SendPropertyChanging();
					_Source = value;
					SendPropertyChanged("LinkedFrom");
					OnLinkedFromChanged();
				}
			}
		}
		
		partial void OnLinkedToChanging(long value);
		partial void OnLinkedToChanged();
		private long _Target;
		[Column(Storage=@"_Target", Name=@"B", DbType=@"BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long LinkedTo
		{
			get { return _Target; }
			set {
				if (_Target != value) {
					if (_TargetLocation.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnLinkedToChanging(value);
					SendPropertyChanging();
					_Target = value;
					SendPropertyChanged("LinkedTo");
					OnLinkedToChanged();
				}
			}
		}
		
		partial void OnUsernameChanging(string value);
		partial void OnUsernameChanged();
		private Link<string> _Username;
		[Column(Storage=@"_Username", DbType=@"NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Username
		{
			get { return _Username.Value; }
			set {
				if (_Username.Value != value) {
					OnUsernameChanging(value);
					SendPropertyChanging();
					_Username.Value = value;
					SendPropertyChanged("Username");
					OnUsernameChanged();
				}
			}
		}
		
		partial void OnCreatedChanging(DateTime value);
		partial void OnCreatedChanged();
		private DateTime _Created = default(DateTime);
		[Column(Storage=@"_Created", AutoSync=AutoSync.Always, DbType=@"DateTime NOT NULL", IsDbGenerated=true, CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public DateTime Created
		{
			get { return _Created; }
		}
		
		#endregion
		
		#region Associations
		private EntityRef<DBLocation> _SourceLocation;
		[Association(Name=@"DBLocation_DBLocationLink", Storage=@"_SourceLocation", ThisKey=@"LinkedFrom", OtherKey=@"ID", IsForeignKey=true)]
		public DBLocation SourceLocation
		{
			get {
				return _SourceLocation.Entity;
			}
			set {
				DBLocation previousValue = _SourceLocation.Entity;
				if ((previousValue != value) || (!_SourceLocation.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_SourceLocation.Entity = null;
						previousValue.IsLinkedTo.Remove(this);
					}
					_SourceLocation.Entity = value;
					if (value != null) {
						value.IsLinkedTo.Add(this);
						_Source = value.ID;
					}
					else {
						_Source = default(long);
					}
					SendPropertyChanged("SourceLocation");
				}
			}
		}

		private EntityRef<DBLocation> _TargetLocation;
		[Association(Name=@"DBLocation_DBLocationLink1", Storage=@"_TargetLocation", ThisKey=@"LinkedTo", OtherKey=@"ID", IsForeignKey=true)]
		public DBLocation TargetLocation
		{
			get {
				return _TargetLocation.Entity;
			}
			set {
				DBLocation previousValue = _TargetLocation.Entity;
				if ((previousValue != value) || (!_TargetLocation.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_TargetLocation.Entity = null;
						previousValue.IsLinkedFrom.Remove(this);
					}
					_TargetLocation.Entity = value;
					if (value != null) {
						value.IsLinkedFrom.Add(this);
						_Target = value.ID;
					}
					else {
						_Target = default(long);
					}
					SendPropertyChanged("TargetLocation");
				}
			}
		}

		#endregion
	}
}
#pragma warning restore 1591