#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;


namespace Annotation.Database
{	
	[Table(Name=@"dbo.StructureType")]
	public partial class DBStructureType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public DBStructureType()
		{
			_dbStructureTypes = new EntitySet<DBStructureType>(attach_Children, detach_Children);
			_StructureTemplates = new EntitySet<StructureTemplate>(attach_StructureTemplates, detach_StructureTemplates);
			_DBStructures = new EntitySet<DBStructure>(attach_Structures, detach_Structures);
			_StructureType1 = default(EntityRef<DBStructureType>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIDChanging(long value);
		partial void OnIDChanged();
		private long _ID;
		[Column(Storage=@"_ID", AutoSync=AutoSync.OnInsert, DbType=@"BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get { return _ID; }
			set {
				if (_ID != value) {
					OnIDChanging(value);
					SendPropertyChanging();
					_ID = value;
					SendPropertyChanged("ID");
					OnIDChanged();
				}
			}
		}
		
		partial void OnParentIDChanging(long? value);
		partial void OnParentIDChanged();
		private long? _Parent;
		[Column(Storage=@"_Parent", DbType=@"BigInt")]
		public long? ParentID
		{
			get { return _Parent; }
			set {
				if (_Parent != value) {
					if (_StructureType1.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnParentIDChanging(value);
					SendPropertyChanging();
					_Parent = value;
					SendPropertyChanged("ParentID");
					OnParentIDChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"NChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnNotesChanging(string value);
		partial void OnNotesChanged();
		private string _Notes;
		[Column(Storage=@"_Notes", DbType=@"Text")]
		public string Notes
		{
			get { return _Notes; }
			set {
				if (_Notes != value) {
					OnNotesChanging(value);
					SendPropertyChanging();
					_Notes = value;
					SendPropertyChanged("Notes");
					OnNotesChanged();
				}
			}
		}
		
		partial void OnMarkupTypeChanging(string value);
		partial void OnMarkupTypeChanged();
		private string _MarkupType;
		[Column(Storage=@"_MarkupType", DbType=@"NChar(16) NOT NULL", CanBeNull=false)]
		public string MarkupType
		{
			get { return _MarkupType; }
			set {
				if (_MarkupType != value) {
					OnMarkupTypeChanging(value);
					SendPropertyChanging();
					_MarkupType = value;
					SendPropertyChanged("MarkupType");
					OnMarkupTypeChanged();
				}
			}
		}
		
		partial void OnTagsChanging(string value);
		partial void OnTagsChanged();
		private string _Tags;
		[Column(Storage=@"_Tags", DbType=@"Xml")]
		public string Tags
		{
			get { return _Tags; }
			set {
				if (_Tags != value) {
					OnTagsChanging(value);
					SendPropertyChanging();
					_Tags = value;
					SendPropertyChanged("Tags");
					OnTagsChanged();
				}
			}
		}
		
		partial void OnStructureTagsChanging(string value);
		partial void OnStructureTagsChanged();
		private string _StructureTags;
		[Column(Storage=@"_StructureTags", DbType=@"Text")]
		public string StructureTags
		{
			get { return _StructureTags; }
			set {
				if (_StructureTags != value) {
					OnStructureTagsChanging(value);
					SendPropertyChanging();
					_StructureTags = value;
					SendPropertyChanged("StructureTags");
					OnStructureTagsChanged();
				}
			}
		}
		
		partial void OnAbstractChanging(bool value);
		partial void OnAbstractChanged();
		private bool _Abstract;
		[Column(Storage=@"_Abstract", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool Abstract
		{
			get { return _Abstract; }
			set {
				if (_Abstract != value) {
					OnAbstractChanging(value);
					SendPropertyChanging();
					_Abstract = value;
					SendPropertyChanged("Abstract");
					OnAbstractChanged();
				}
			}
		}
		
		partial void OnColorChanging(int value);
		partial void OnColorChanged();
		private int _Color;
		[Column(Storage=@"_Color", DbType=@"Int NOT NULL", CanBeNull=false)]
		public int Color
		{
			get { return _Color; }
			set {
				if (_Color != value) {
					OnColorChanging(value);
					SendPropertyChanging();
					_Color = value;
					SendPropertyChanged("Color");
					OnColorChanged();
				}
			}
		}
		
		partial void OnVersionChanging(Binary value);
		partial void OnVersionChanged();
		private Binary _Version;
		[Column(Storage=@"_Version", AutoSync=AutoSync.Always, DbType=@"rowversion NOT NULL", IsDbGenerated=true, IsVersion=true, CanBeNull=false)]
		public Binary Version
		{
			get { return _Version; }
			set {
				if (_Version != value) {
					OnVersionChanging(value);
					SendPropertyChanging();
					_Version = value;
					SendPropertyChanged("Version");
					OnVersionChanged();
				}
			}
		}
		
		partial void OnCodeChanging(string value);
		partial void OnCodeChanged();
		private string _Code;
		[Column(Storage=@"_Code", DbType=@"NChar(16) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get { return _Code; }
			set {
				if (_Code != value) {
					OnCodeChanging(value);
					SendPropertyChanging();
					_Code = value;
					SendPropertyChanged("Code");
					OnCodeChanged();
				}
			}
		}
		
		partial void OnHotKeyChanging(char value);
		partial void OnHotKeyChanged();
		private char _HotKey;
		[Column(Storage=@"_HotKey", DbType=@"Char(1) NOT NULL", CanBeNull=false)]
		public char HotKey
		{
			get { return _HotKey; }
			set {
				if (_HotKey != value) {
					OnHotKeyChanging(value);
					SendPropertyChanging();
					_HotKey = value;
					SendPropertyChanged("HotKey");
					OnHotKeyChanged();
				}
			}
		}
		
		partial void OnUsernameChanging(string value);
		partial void OnUsernameChanged();
		private Link<string> _Username;
		[Column(Storage=@"_Username", DbType=@"NText NOT NULL", CanBeNull=false)]
		public string Username
		{
			get { return _Username.Value; }
			set {
				if (_Username.Value != value) {
					OnUsernameChanging(value);
					SendPropertyChanging();
					_Username.Value = value;
					SendPropertyChanged("Username");
					OnUsernameChanged();
				}
			}
		}
		
		partial void OnLastModifiedChanging(DateTime value);
		partial void OnLastModifiedChanged();
		private DateTime _LastModified = default(DateTime);
		[Column(Storage=@"_LastModified", AutoSync=AutoSync.Always, DbType=@"DateTime NOT NULL", IsDbGenerated=true, CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public DateTime LastModified
		{
			get { return _LastModified; }
		}
		
		partial void OnCreatedChanging(DateTime value);
		partial void OnCreatedChanged();
		private DateTime _Created = default(DateTime);
		[Column(Storage=@"_Created", AutoSync=AutoSync.Always, DbType=@"DateTime NOT NULL", IsDbGenerated=true, CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public DateTime Created
		{
			get { return _Created; }
		}
		
		#endregion
		
		#region Associations
		private EntitySet<DBStructureType> _dbStructureTypes;
		[Association(Name=@"DBStructureType_DBStructureType", Storage=@"_dbStructureTypes", ThisKey=@"ID", OtherKey=@"ParentID")]
		public EntitySet<DBStructureType> Children
		{
			get {
				return _dbStructureTypes;
			}
			set {
				_dbStructureTypes.Assign(value);
			}
		}

		private void attach_Children(DBStructureType entity)
		{
			SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_Children(DBStructureType entity)
		{
			SendPropertyChanging();
			entity.Parent = null;
		}
		
		private EntitySet<StructureTemplate> _StructureTemplates;
		[Association(Name=@"DBStructureType_StructureTemplate", Storage=@"_StructureTemplates", ThisKey=@"ID", OtherKey=@"StructureTypeID")]
		public EntitySet<StructureTemplate> StructureTemplates
		{
			get {
				return _StructureTemplates;
			}
			set {
				_StructureTemplates.Assign(value);
			}
		}

		private void attach_StructureTemplates(StructureTemplate entity)
		{
			SendPropertyChanging();
			entity.DBStructureType = this;
		}
		
		private void detach_StructureTemplates(StructureTemplate entity)
		{
			SendPropertyChanging();
			entity.DBStructureType = null;
		}
		
		private EntitySet<DBStructure> _DBStructures;
		[Association(Name=@"DBStructureType_DBStructure", Storage=@"_DBStructures", ThisKey=@"ID", OtherKey=@"TypeID")]
		public EntitySet<DBStructure> Structures
		{
			get {
				return _DBStructures;
			}
			set {
				_DBStructures.Assign(value);
			}
		}

		private void attach_Structures(DBStructure entity)
		{
			SendPropertyChanging();
			entity.StructureType = this;
		}
		
		private void detach_Structures(DBStructure entity)
		{
			SendPropertyChanging();
			entity.StructureType = null;
		}
		
		private EntityRef<DBStructureType> _StructureType1;
		[Association(Name=@"DBStructureType_DBStructureType", Storage=@"_StructureType1", ThisKey=@"ParentID", OtherKey=@"ID", IsForeignKey=true)]
		public DBStructureType Parent
		{
			get {
				return _StructureType1.Entity;
			}
			set {
				DBStructureType previousValue = _StructureType1.Entity;
				if ((previousValue != value) || (!_StructureType1.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_StructureType1.Entity = null;
						previousValue.Children.Remove(this);
					}
					_StructureType1.Entity = value;
					if (value != null) {
						value.Children.Add(this);
						_Parent = value.ID;
					}
					else {
						_Parent = default(long?);
					}
					SendPropertyChanged("Parent");
				}
			}
		}

		#endregion
	}
}
#pragma warning restore 1591