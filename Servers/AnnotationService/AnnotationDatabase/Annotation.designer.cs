#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Annotation.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Rabbit")]
	public partial class AnnotationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDBStructureType(DBStructureType instance);
    partial void UpdateDBStructureType(DBStructureType instance);
    partial void DeleteDBStructureType(DBStructureType instance);
    partial void InsertDBLocation(DBLocation instance);
    partial void UpdateDBLocation(DBLocation instance);
    partial void DeleteDBLocation(DBLocation instance);
    partial void InsertDBLocationLink(DBLocationLink instance);
    partial void UpdateDBLocationLink(DBLocationLink instance);
    partial void DeleteDBLocationLink(DBLocationLink instance);
    partial void InsertStructureTemplate(StructureTemplate instance);
    partial void UpdateStructureTemplate(StructureTemplate instance);
    partial void DeleteStructureTemplate(StructureTemplate instance);
    partial void InsertDBStructureLink(DBStructureLink instance);
    partial void UpdateDBStructureLink(DBStructureLink instance);
    partial void DeleteDBStructureLink(DBStructureLink instance);
    partial void InsertDBStructure(DBStructure instance);
    partial void UpdateDBStructure(DBStructure instance);
    partial void DeleteDBStructure(DBStructure instance);
    partial void InsertDBDeletedLocations(DBDeletedLocations instance);
    partial void UpdateDBDeletedLocations(DBDeletedLocations instance);
    partial void DeleteDBDeletedLocations(DBDeletedLocations instance);
    #endregion
		
		public AnnotationDataContext() : 
				base(global::AnnotationDatabase.Properties.Settings.Default.RabbitConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public AnnotationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnnotationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnnotationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AnnotationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DBStructureType> DBStructureTypes
		{
			get
			{
				return this.GetTable<DBStructureType>();
			}
		}
		
		public System.Data.Linq.Table<DBLocation> DBLocations
		{
			get
			{
				return this.GetTable<DBLocation>();
			}
		}
		
		public System.Data.Linq.Table<DBLocationLink> DBLocationLinks
		{
			get
			{
				return this.GetTable<DBLocationLink>();
			}
		}
		
		public System.Data.Linq.Table<StructureTemplate> StructureTemplates
		{
			get
			{
				return this.GetTable<StructureTemplate>();
			}
		}
		
		public System.Data.Linq.Table<DBStructureLink> DBStructureLinks
		{
			get
			{
				return this.GetTable<DBStructureLink>();
			}
		}
		
		public System.Data.Linq.Table<DBStructure> DBStructures
		{
			get
			{
				return this.GetTable<DBStructure>();
			}
		}
		
		public System.Data.Linq.Table<DBDeletedLocations> DBDeletedLocations
		{
			get
			{
				return this.GetTable<DBDeletedLocations>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.MergeStructures")]
		public int MergeStructures([global::System.Data.Linq.Mapping.ParameterAttribute(Name="KeepStructureID", DbType="BigInt")] System.Nullable<long> keepStructureID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MergeStructureID", DbType="BigInt")] System.Nullable<long> mergeStructureID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), keepStructureID, mergeStructureID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectSectionLocationLinks")]
		public ISingleResult<DBLocationLink> SelectSectionLocationLinks([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Z", DbType="Float")] System.Nullable<double> z, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="QueryDate", DbType="DateTime")] System.Nullable<System.DateTime> queryDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), z, queryDate);
			return ((ISingleResult<DBLocationLink>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ApproximateStructureLocations")]
		public ISingleResult<ApproximateStructureLocationsResult> ApproximateStructureLocations()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ApproximateStructureLocationsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectLastModifiedLocationByUsers")]
		public ISingleResult<DBLocation> SelectLastModifiedLocationByUsers()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<DBLocation>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ApproximateStructureLocation")]
		public ISingleResult<ApproximateStructureLocationResult1> ApproximateStructureLocation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StructureID", DbType="Int")] System.Nullable<int> structureID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), structureID);
			return ((ISingleResult<ApproximateStructureLocationResult1>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectNumConnectionsPerStructure")]
		public ISingleResult<SelectNumConnectionsPerStructureResult> SelectNumConnectionsPerStructure()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SelectNumConnectionsPerStructureResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectStructureLabels")]
		public ISingleResult<SelectStructureLabelsResult> SelectStructureLabels()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<SelectStructureLabelsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CountChildStructuresByType")]
		public ISingleResult<CountChildStructuresByTypeResult> CountChildStructuresByType([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StructureID", DbType="BigInt")] System.Nullable<long> structureID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), structureID);
			return ((ISingleResult<CountChildStructuresByTypeResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectUnfinishedStructureBranches")]
		public ISingleResult<SelectUnfinishedStructureBranchesResult> SelectUnfinishedStructureBranches([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StructureID", DbType="BigInt")] System.Nullable<long> structureID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), structureID);
			return ((ISingleResult<SelectUnfinishedStructureBranchesResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SelectUnfinishedStructureBranchesWithPosition")]
		public ISingleResult<SelectUnfinishedStructureBranchesWithPositionResult> SelectUnfinishedStructureBranchesWithPosition([global::System.Data.Linq.Mapping.ParameterAttribute(Name="StructureID", DbType="BigInt")] System.Nullable<long> structureID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), structureID);
			return ((ISingleResult<SelectUnfinishedStructureBranchesWithPositionResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StructureType")]
	public partial class DBStructureType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.Nullable<long> _Parent;
		
		private string _Name;
		
		private string _Notes;
		
		private string _MarkupType;
		
		private string _Tags;
		
		private string _StructureTags;
		
		private bool _Abstract;
		
		private int _Color;
		
		private System.Data.Linq.Binary _Version;
		
		private string _Code;
		
		private char _HotKey;
		
		private System.Data.Linq.Link<string> _Username;
		
		private System.DateTime _LastModified = default(System.DateTime);
		
		private System.DateTime _Created = default(System.DateTime);
		
		private EntitySet<DBStructureType> _dbStructureTypes;
		
		private EntitySet<StructureTemplate> _StructureTemplates;
		
		private EntitySet<DBStructure> _DBStructures;
		
		private EntityRef<DBStructureType> _StructureType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(System.Nullable<long> value);
    partial void OnParentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnMarkupTypeChanging(string value);
    partial void OnMarkupTypeChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnStructureTagsChanging(string value);
    partial void OnStructureTagsChanged();
    partial void OnAbstractChanging(bool value);
    partial void OnAbstractChanged();
    partial void OnColorChanging(int value);
    partial void OnColorChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnHotKeyChanging(char value);
    partial void OnHotKeyChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public DBStructureType()
		{
			this._dbStructureTypes = new EntitySet<DBStructureType>(new Action<DBStructureType>(this.attach_dbStructureTypes), new Action<DBStructureType>(this.detach_dbStructureTypes));
			this._StructureTemplates = new EntitySet<StructureTemplate>(new Action<StructureTemplate>(this.attach_StructureTemplates), new Action<StructureTemplate>(this.detach_StructureTemplates));
			this._DBStructures = new EntitySet<DBStructure>(new Action<DBStructure>(this.attach_DBStructures), new Action<DBStructure>(this.detach_DBStructures));
			this._StructureType1 = default(EntityRef<DBStructureType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parent", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ParentID
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					if (this._StructureType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(128) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkupType", DbType="NChar(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MarkupType
		{
			get
			{
				return this._MarkupType;
			}
			set
			{
				if ((this._MarkupType != value))
				{
					this.OnMarkupTypeChanging(value);
					this.SendPropertyChanging();
					this._MarkupType = value;
					this.SendPropertyChanged("MarkupType");
					this.OnMarkupTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StructureTags", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string StructureTags
		{
			get
			{
				return this._StructureTags;
			}
			set
			{
				if ((this._StructureTags != value))
				{
					this.OnStructureTagsChanging(value);
					this.SendPropertyChanging();
					this._StructureTags = value;
					this.SendPropertyChanged("StructureTags");
					this.OnStructureTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abstract", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Abstract
		{
			get
			{
				return this._Abstract;
			}
			set
			{
				if ((this._Abstract != value))
				{
					this.OnAbstractChanging(value);
					this.SendPropertyChanging();
					this._Abstract = value;
					this.SendPropertyChanged("Abstract");
					this.OnAbstractChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NChar(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HotKey", DbType="Char(1) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public char HotKey
		{
			get
			{
				return this._HotKey;
			}
			set
			{
				if ((this._HotKey != value))
				{
					this.OnHotKeyChanging(value);
					this.SendPropertyChanging();
					this._HotKey = value;
					this.SendPropertyChanged("HotKey");
					this.OnHotKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NChar NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Username
		{
			get
			{
				return this._Username.Value;
			}
			set
			{
				if ((this._Username.Value != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username.Value = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructureType_DBStructureType", Storage="_dbStructureTypes", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<DBStructureType> Children
		{
			get
			{
				return this._dbStructureTypes;
			}
			set
			{
				this._dbStructureTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructureType_StructureTemplate", Storage="_StructureTemplates", ThisKey="ID", OtherKey="StructureTypeID")]
		public EntitySet<StructureTemplate> StructureTemplates
		{
			get
			{
				return this._StructureTemplates;
			}
			set
			{
				this._StructureTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructureType_DBStructure", Storage="_DBStructures", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<DBStructure> Structures
		{
			get
			{
				return this._DBStructures;
			}
			set
			{
				this._DBStructures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructureType_DBStructureType", Storage="_StructureType1", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public DBStructureType Parent
		{
			get
			{
				return this._StructureType1.Entity;
			}
			set
			{
				DBStructureType previousValue = this._StructureType1.Entity;
				if (((previousValue != value) 
							|| (this._StructureType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StructureType1.Entity = null;
						previousValue.Children.Remove(this);
					}
					this._StructureType1.Entity = value;
					if ((value != null))
					{
						value.Children.Add(this);
						this._Parent = value.ID;
					}
					else
					{
						this._Parent = default(Nullable<long>);
					}
					this.SendPropertyChanged("Parent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_dbStructureTypes(DBStructureType entity)
		{
			this.SendPropertyChanging();
			entity.Parent = this;
		}
		
		private void detach_dbStructureTypes(DBStructureType entity)
		{
			this.SendPropertyChanging();
			entity.Parent = null;
		}
		
		private void attach_StructureTemplates(StructureTemplate entity)
		{
			this.SendPropertyChanging();
			entity.DBStructureType = this;
		}
		
		private void detach_StructureTemplates(StructureTemplate entity)
		{
			this.SendPropertyChanging();
			entity.DBStructureType = null;
		}
		
		private void attach_DBStructures(DBStructure entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = this;
		}
		
		private void detach_DBStructures(DBStructure entity)
		{
			this.SendPropertyChanging();
			entity.StructureType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class DBLocation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _ParentID;
		
		private double _X;
		
		private double _Y;
		
		private double _Z;
		
		private System.Data.Linq.Binary _Verticies;
		
		private bool _Closed;
		
		private System.Data.Linq.Binary _Version;
		
		private string _Tags;
		
		private double _VolumeX;
		
		private double _VolumeY;
		
		private bool _Extensible;
		
		private bool _OffEdge;
		
		private double _Radius;
		
		private short _TypeCode;
		
		private System.DateTime _LastModified = default(System.DateTime);
		
		private string _Username;
		
		private System.DateTime _Created = default(System.DateTime);
		
		private EntitySet<DBLocationLink> _SourcedBy;
		
		private EntitySet<DBLocationLink> _TargettedBy;
		
		private EntityRef<DBStructure> _DBStructure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnParentIDChanging(long value);
    partial void OnParentIDChanged();
    partial void OnXChanging(double value);
    partial void OnXChanged();
    partial void OnYChanging(double value);
    partial void OnYChanged();
    partial void OnZChanging(double value);
    partial void OnZChanged();
    partial void OnVerticiesChanging(System.Data.Linq.Binary value);
    partial void OnVerticiesChanged();
    partial void OnClosedChanging(bool value);
    partial void OnClosedChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnVolumeXChanging(double value);
    partial void OnVolumeXChanged();
    partial void OnVolumeYChanging(double value);
    partial void OnVolumeYChanged();
    partial void OnTerminalChanging(bool value);
    partial void OnTerminalChanged();
    partial void OnOffEdgeChanging(bool value);
    partial void OnOffEdgeChanged();
    partial void OnRadiusChanging(double value);
    partial void OnRadiusChanged();
    partial void OnTypeCodeChanging(short value);
    partial void OnTypeCodeChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public DBLocation()
		{
			this._SourcedBy = new EntitySet<DBLocationLink>(new Action<DBLocationLink>(this.attach_SourcedBy), new Action<DBLocationLink>(this.detach_SourcedBy));
			this._TargettedBy = new EntitySet<DBLocationLink>(new Action<DBLocationLink>(this.attach_TargettedBy), new Action<DBLocationLink>(this.detach_TargettedBy));
			this._DBStructure = default(EntityRef<DBStructure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="BigInt", UpdateCheck=UpdateCheck.WhenChanged)]
		public long ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._DBStructure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public double X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public double Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Z", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public double Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this.OnZChanging(value);
					this.SendPropertyChanging();
					this._Z = value;
					this.SendPropertyChanged("Z");
					this.OnZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verticies", DbType="VarBinary(64)", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Data.Linq.Binary Verticies
		{
			get
			{
				return this._Verticies;
			}
			set
			{
				if ((this._Verticies != value))
				{
					this.OnVerticiesChanging(value);
					this.SendPropertyChanging();
					this._Verticies = value;
					this.SendPropertyChanged("Verticies");
					this.OnVerticiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Closed", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public bool Closed
		{
			get
			{
				return this._Closed;
			}
			set
			{
				if ((this._Closed != value))
				{
					this.OnClosedChanging(value);
					this.SendPropertyChanging();
					this._Closed = value;
					this.SendPropertyChanged("Closed");
					this.OnClosedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="Xml", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumeX", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public double VolumeX
		{
			get
			{
				return this._VolumeX;
			}
			set
			{
				if ((this._VolumeX != value))
				{
					this.OnVolumeXChanging(value);
					this.SendPropertyChanging();
					this._VolumeX = value;
					this.SendPropertyChanged("VolumeX");
					this.OnVolumeXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumeY", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public double VolumeY
		{
			get
			{
				return this._VolumeY;
			}
			set
			{
				if ((this._VolumeY != value))
				{
					this.OnVolumeYChanging(value);
					this.SendPropertyChanging();
					this._VolumeY = value;
					this.SendPropertyChanged("VolumeY");
					this.OnVolumeYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Extensible", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public bool Terminal
		{
			get
			{
				return this._Extensible;
			}
			set
			{
				if ((this._Extensible != value))
				{
					this.OnTerminalChanging(value);
					this.SendPropertyChanging();
					this._Extensible = value;
					this.SendPropertyChanged("Terminal");
					this.OnTerminalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OffEdge", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public bool OffEdge
		{
			get
			{
				return this._OffEdge;
			}
			set
			{
				if ((this._OffEdge != value))
				{
					this.OnOffEdgeChanging(value);
					this.SendPropertyChanging();
					this._OffEdge = value;
					this.SendPropertyChanged("OffEdge");
					this.OnOffEdgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Radius", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public double Radius
		{
			get
			{
				return this._Radius;
			}
			set
			{
				if ((this._Radius != value))
				{
					this.OnRadiusChanging(value);
					this.SendPropertyChanging();
					this._Radius = value;
					this.SendPropertyChanged("Radius");
					this.OnRadiusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeCode", DbType="smallint NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public short TypeCode
		{
			get
			{
				return this._TypeCode;
			}
			set
			{
				if ((this._TypeCode != value))
				{
					this.OnTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._TypeCode = value;
					this.SendPropertyChanged("TypeCode");
					this.OnTypeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NChar NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBLocation_DBLocationLink", Storage="_SourcedBy", ThisKey="ID", OtherKey="LinkedFrom")]
		public EntitySet<DBLocationLink> IsLinkedTo
		{
			get
			{
				return this._SourcedBy;
			}
			set
			{
				this._SourcedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBLocation_DBLocationLink1", Storage="_TargettedBy", ThisKey="ID", OtherKey="LinkedTo")]
		public EntitySet<DBLocationLink> IsLinkedFrom
		{
			get
			{
				return this._TargettedBy;
			}
			set
			{
				this._TargettedBy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructure_DBLocation", Storage="_DBStructure", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public DBStructure DBStructure
		{
			get
			{
				return this._DBStructure.Entity;
			}
			set
			{
				DBStructure previousValue = this._DBStructure.Entity;
				if (((previousValue != value) 
							|| (this._DBStructure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBStructure.Entity = null;
						previousValue.DBLocations.Remove(this);
					}
					this._DBStructure.Entity = value;
					if ((value != null))
					{
						value.DBLocations.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(long);
					}
					this.SendPropertyChanged("DBStructure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SourcedBy(DBLocationLink entity)
		{
			this.SendPropertyChanging();
			entity.SourceLocation = this;
		}
		
		private void detach_SourcedBy(DBLocationLink entity)
		{
			this.SendPropertyChanging();
			entity.SourceLocation = null;
		}
		
		private void attach_TargettedBy(DBLocationLink entity)
		{
			this.SendPropertyChanging();
			entity.TargetLocation = this;
		}
		
		private void detach_TargettedBy(DBLocationLink entity)
		{
			this.SendPropertyChanging();
			entity.TargetLocation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationLink")]
	public partial class DBLocationLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Source;
		
		private long _Target;
		
		private string _Username;
		
		private System.DateTime _Created = default(System.DateTime);
		
		private EntityRef<DBLocation> _SourceLocation;
		
		private EntityRef<DBLocation> _TargetLocation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLinkedFromChanging(long value);
    partial void OnLinkedFromChanged();
    partial void OnLinkedToChanging(long value);
    partial void OnLinkedToChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public DBLocationLink()
		{
			this._SourceLocation = default(EntityRef<DBLocation>);
			this._TargetLocation = default(EntityRef<DBLocation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="A", Storage="_Source", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long LinkedFrom
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnLinkedFromChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("LinkedFrom");
					this.OnLinkedFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="B", Storage="_Target", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long LinkedTo
		{
			get
			{
				return this._Target;
			}
			set
			{
				if ((this._Target != value))
				{
					this.OnLinkedToChanging(value);
					this.SendPropertyChanging();
					this._Target = value;
					this.SendPropertyChanged("LinkedTo");
					this.OnLinkedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NChar NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBLocation_DBLocationLink", Storage="_SourceLocation", ThisKey="LinkedFrom", OtherKey="ID", IsForeignKey=true)]
		public DBLocation SourceLocation
		{
			get
			{
				return this._SourceLocation.Entity;
			}
			set
			{
				DBLocation previousValue = this._SourceLocation.Entity;
				if (((previousValue != value) 
							|| (this._SourceLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceLocation.Entity = null;
						previousValue.IsLinkedTo.Remove(this);
					}
					this._SourceLocation.Entity = value;
					if ((value != null))
					{
						value.IsLinkedTo.Add(this);
						this._Source = value.ID;
					}
					else
					{
						this._Source = default(long);
					}
					this.SendPropertyChanged("SourceLocation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBLocation_DBLocationLink1", Storage="_TargetLocation", ThisKey="LinkedTo", OtherKey="ID", IsForeignKey=true)]
		public DBLocation TargetLocation
		{
			get
			{
				return this._TargetLocation.Entity;
			}
			set
			{
				DBLocation previousValue = this._TargetLocation.Entity;
				if (((previousValue != value) 
							|| (this._TargetLocation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TargetLocation.Entity = null;
						previousValue.IsLinkedFrom.Remove(this);
					}
					this._TargetLocation.Entity = value;
					if ((value != null))
					{
						value.IsLinkedFrom.Add(this);
						this._Target = value.ID;
					}
					else
					{
						this._Target = default(long);
					}
					this.SendPropertyChanged("TargetLocation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StructureTemplates")]
	public partial class StructureTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private long _StructureTypeID;
		
		private string _StructureTags;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<DBStructureType> _DBStructureType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStructureTypeIDChanging(long value);
    partial void OnStructureTypeIDChanged();
    partial void OnStructureTagsChanging(string value);
    partial void OnStructureTagsChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public StructureTemplate()
		{
			this._DBStructureType = default(EntityRef<DBStructureType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Char(64) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StructureTypeID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public long StructureTypeID
		{
			get
			{
				return this._StructureTypeID;
			}
			set
			{
				if ((this._StructureTypeID != value))
				{
					if (this._DBStructureType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStructureTypeIDChanging(value);
					this.SendPropertyChanging();
					this._StructureTypeID = value;
					this.SendPropertyChanged("StructureTypeID");
					this.OnStructureTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StructureTags", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string StructureTags
		{
			get
			{
				return this._StructureTags;
			}
			set
			{
				if ((this._StructureTags != value))
				{
					this.OnStructureTagsChanging(value);
					this.SendPropertyChanging();
					this._StructureTags = value;
					this.SendPropertyChanged("StructureTags");
					this.OnStructureTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructureType_StructureTemplate", Storage="_DBStructureType", ThisKey="StructureTypeID", OtherKey="ID", IsForeignKey=true)]
		public DBStructureType DBStructureType
		{
			get
			{
				return this._DBStructureType.Entity;
			}
			set
			{
				DBStructureType previousValue = this._DBStructureType.Entity;
				if (((previousValue != value) 
							|| (this._DBStructureType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBStructureType.Entity = null;
						previousValue.StructureTemplates.Remove(this);
					}
					this._DBStructureType.Entity = value;
					if ((value != null))
					{
						value.StructureTemplates.Add(this);
						this._StructureTypeID = value.ID;
					}
					else
					{
						this._StructureTypeID = default(long);
					}
					this.SendPropertyChanged("DBStructureType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StructureLink")]
	public partial class DBStructureLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SourceID;
		
		private long _TargetID;
		
		private bool _Bidirectional;
		
		private string _Tags;
		
		private string _Username;
		
		private System.DateTime _Created = default(System.DateTime);
		
		private System.DateTime _LastModified = default(System.DateTime);
		
		private EntityRef<DBStructure> _Structure;
		
		private EntityRef<DBStructure> _DBStructure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSourceIDChanging(long value);
    partial void OnSourceIDChanged();
    partial void OnTargetIDChanging(long value);
    partial void OnTargetIDChanged();
    partial void OnBidirectionalChanging(bool value);
    partial void OnBidirectionalChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public DBStructureLink()
		{
			this._Structure = default(EntityRef<DBStructure>);
			this._DBStructure = default(EntityRef<DBStructure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					if (this._Structure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long TargetID
		{
			get
			{
				return this._TargetID;
			}
			set
			{
				if ((this._TargetID != value))
				{
					if (this._DBStructure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetIDChanging(value);
					this.SendPropertyChanging();
					this._TargetID = value;
					this.SendPropertyChanged("TargetID");
					this.OnTargetIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bidirectional", DbType="Bit NOT NULL")]
		public bool Bidirectional
		{
			get
			{
				return this._Bidirectional;
			}
			set
			{
				if ((this._Bidirectional != value))
				{
					this.OnBidirectionalChanging(value);
					this.SendPropertyChanging();
					this._Bidirectional = value;
					this.SendPropertyChanged("Bidirectional");
					this.OnBidirectionalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="Xml", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NChar NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructure_DBStructureLink", Storage="_Structure", ThisKey="SourceID", OtherKey="ID", IsForeignKey=true)]
		public DBStructure SourceStructure
		{
			get
			{
				return this._Structure.Entity;
			}
			set
			{
				DBStructure previousValue = this._Structure.Entity;
				if (((previousValue != value) 
							|| (this._Structure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Structure.Entity = null;
						previousValue.IsSourceOf.Remove(this);
					}
					this._Structure.Entity = value;
					if ((value != null))
					{
						value.IsSourceOf.Add(this);
						this._SourceID = value.ID;
					}
					else
					{
						this._SourceID = default(long);
					}
					this.SendPropertyChanged("SourceStructure");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructure_DBStructureLink1", Storage="_DBStructure", ThisKey="TargetID", OtherKey="ID", IsForeignKey=true)]
		public DBStructure TargetStructure
		{
			get
			{
				return this._DBStructure.Entity;
			}
			set
			{
				DBStructure previousValue = this._DBStructure.Entity;
				if (((previousValue != value) 
							|| (this._DBStructure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBStructure.Entity = null;
						previousValue.IsTargetOf.Remove(this);
					}
					this._DBStructure.Entity = value;
					if ((value != null))
					{
						value.IsTargetOf.Add(this);
						this._TargetID = value.ID;
					}
					else
					{
						this._TargetID = default(long);
					}
					this.SendPropertyChanged("TargetStructure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Structure")]
	public partial class DBStructure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _TypeID;
		
		private string _Notes;
		
		private bool _Verified;
		
		private string _Tags;
		
		private double _Confidence;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<long> _ParentID;
		
		private string _Label;
		
		private string _Username;
		
		private System.DateTime _LastModified = default(System.DateTime);
		
		private System.DateTime _Created = default(System.DateTime);
		
		private EntitySet<DBLocation> _DBLocations;
		
		private EntitySet<DBStructureLink> _DBStructureLinks;
		
		private EntitySet<DBStructureLink> _DBStructureLinks1;
		
		private EntitySet<DBStructure> _DBStructures;
		
		private EntityRef<DBStructureType> _DBStructureType;
		
		private EntityRef<DBStructure> _ParentStructure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(long value);
    partial void OnTypeIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnVerifiedChanging(bool value);
    partial void OnVerifiedChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnConfidenceChanging(double value);
    partial void OnConfidenceChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnParentIDChanging(System.Nullable<long> value);
    partial void OnParentIDChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public DBStructure()
		{
			this._DBLocations = new EntitySet<DBLocation>(new Action<DBLocation>(this.attach_DBLocations), new Action<DBLocation>(this.detach_DBLocations));
			this._DBStructureLinks = new EntitySet<DBStructureLink>(new Action<DBStructureLink>(this.attach_DBStructureLinks), new Action<DBStructureLink>(this.detach_DBStructureLinks));
			this._DBStructureLinks1 = new EntitySet<DBStructureLink>(new Action<DBStructureLink>(this.attach_DBStructureLinks1), new Action<DBStructureLink>(this.detach_DBStructureLinks1));
			this._DBStructures = new EntitySet<DBStructure>(new Action<DBStructure>(this.attach_DBStructures), new Action<DBStructure>(this.detach_DBStructures));
			this._DBStructureType = default(EntityRef<DBStructureType>);
			this._ParentStructure = default(EntityRef<DBStructure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public long TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._DBStructureType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="Text", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Verified", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public bool Verified
		{
			get
			{
				return this._Verified;
			}
			set
			{
				if ((this._Verified != value))
				{
					this.OnVerifiedChanging(value);
					this.SendPropertyChanging();
					this._Verified = value;
					this.SendPropertyChanged("Verified");
					this.OnVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="Xml", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Confidence", DbType="Float NOT NULL", UpdateCheck=UpdateCheck.WhenChanged)]
		public double Confidence
		{
			get
			{
				return this._Confidence;
			}
			set
			{
				if ((this._Confidence != value))
				{
					this.OnConfidenceChanging(value);
					this.SendPropertyChanging();
					this._Confidence = value;
					this.SendPropertyChanged("Confidence");
					this.OnConfidenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="BigInt", UpdateCheck=UpdateCheck.WhenChanged)]
		public System.Nullable<long> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._ParentStructure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="Varchar(32)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NChar NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModified
		{
			get
			{
				return this._LastModified;
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructure_DBLocation", Storage="_DBLocations", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<DBLocation> DBLocations
		{
			get
			{
				return this._DBLocations;
			}
			set
			{
				this._DBLocations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructure_DBStructureLink", Storage="_DBStructureLinks", ThisKey="ID", OtherKey="SourceID")]
		public EntitySet<DBStructureLink> IsSourceOf
		{
			get
			{
				return this._DBStructureLinks;
			}
			set
			{
				this._DBStructureLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructure_DBStructureLink1", Storage="_DBStructureLinks1", ThisKey="ID", OtherKey="TargetID")]
		public EntitySet<DBStructureLink> IsTargetOf
		{
			get
			{
				return this._DBStructureLinks1;
			}
			set
			{
				this._DBStructureLinks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructure_DBStructure", Storage="_DBStructures", ThisKey="ID", OtherKey="ParentID")]
		public EntitySet<DBStructure> ChildStructures
		{
			get
			{
				return this._DBStructures;
			}
			set
			{
				this._DBStructures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructureType_DBStructure", Storage="_DBStructureType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public DBStructureType StructureType
		{
			get
			{
				return this._DBStructureType.Entity;
			}
			set
			{
				DBStructureType previousValue = this._DBStructureType.Entity;
				if (((previousValue != value) 
							|| (this._DBStructureType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DBStructureType.Entity = null;
						previousValue.Structures.Remove(this);
					}
					this._DBStructureType.Entity = value;
					if ((value != null))
					{
						value.Structures.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(long);
					}
					this.SendPropertyChanged("StructureType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DBStructure_DBStructure", Storage="_ParentStructure", ThisKey="ParentID", OtherKey="ID", IsForeignKey=true)]
		public DBStructure ParentStructure
		{
			get
			{
				return this._ParentStructure.Entity;
			}
			set
			{
				DBStructure previousValue = this._ParentStructure.Entity;
				if (((previousValue != value) 
							|| (this._ParentStructure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentStructure.Entity = null;
						previousValue.ChildStructures.Remove(this);
					}
					this._ParentStructure.Entity = value;
					if ((value != null))
					{
						value.ChildStructures.Add(this);
						this._ParentID = value.ID;
					}
					else
					{
						this._ParentID = default(Nullable<long>);
					}
					this.SendPropertyChanged("ParentStructure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DBLocations(DBLocation entity)
		{
			this.SendPropertyChanging();
			entity.DBStructure = this;
		}
		
		private void detach_DBLocations(DBLocation entity)
		{
			this.SendPropertyChanging();
			entity.DBStructure = null;
		}
		
		private void attach_DBStructureLinks(DBStructureLink entity)
		{
			this.SendPropertyChanging();
			entity.SourceStructure = this;
		}
		
		private void detach_DBStructureLinks(DBStructureLink entity)
		{
			this.SendPropertyChanging();
			entity.SourceStructure = null;
		}
		
		private void attach_DBStructureLinks1(DBStructureLink entity)
		{
			this.SendPropertyChanging();
			entity.TargetStructure = this;
		}
		
		private void detach_DBStructureLinks1(DBStructureLink entity)
		{
			this.SendPropertyChanging();
			entity.TargetStructure = null;
		}
		
		private void attach_DBStructures(DBStructure entity)
		{
			this.SendPropertyChanging();
			entity.ParentStructure = this;
		}
		
		private void detach_DBStructures(DBStructure entity)
		{
			this.SendPropertyChanging();
			entity.ParentStructure = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeletedLocations")]
	public partial class DBDeletedLocations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.DateTime _DeletedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnDeletedOnChanging(System.DateTime value);
    partial void OnDeletedOnChanged();
    #endregion
		
		public DBDeletedLocations()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime NOT NULL")]
		public System.DateTime DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class ApproximateStructureLocationsResult
	{
		
		private long _ParentID;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<double> _Radius;
		
		public ApproximateStructureLocationsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="BigInt NOT NULL")]
		public long ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this._ParentID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Radius", DbType="Float")]
		public System.Nullable<double> Radius
		{
			get
			{
				return this._Radius;
			}
			set
			{
				if ((this._Radius != value))
				{
					this._Radius = value;
				}
			}
		}
	}
	
	public partial class ApproximateStructureLocationResult1
	{
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private System.Nullable<double> _Z;
		
		private System.Nullable<double> _Radius;
		
		public ApproximateStructureLocationResult1()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Z", DbType="Float")]
		public System.Nullable<double> Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Radius", DbType="Float")]
		public System.Nullable<double> Radius
		{
			get
			{
				return this._Radius;
			}
			set
			{
				if ((this._Radius != value))
				{
					this._Radius = value;
				}
			}
		}
	}
	
	public partial class SelectNumConnectionsPerStructureResult
	{
		
		private System.Nullable<long> _StructureID;
		
		private string _Label;
		
		private System.Nullable<int> _NumConnections;
		
		public SelectNumConnectionsPerStructureResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StructureID", DbType="BigInt")]
		public System.Nullable<long> StructureID
		{
			get
			{
				return this._StructureID;
			}
			set
			{
				if ((this._StructureID != value))
				{
					this._StructureID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="VarChar(64)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this._Label = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumConnections", DbType="Int")]
		public System.Nullable<int> NumConnections
		{
			get
			{
				return this._NumConnections;
			}
			set
			{
				if ((this._NumConnections != value))
				{
					this._NumConnections = value;
				}
			}
		}
	}
	
	public partial class SelectStructureLabelsResult
	{
		
		private long _ID;
		
		private string _Label;
		
		public SelectStructureLabelsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Label", DbType="VarChar(64)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this._Label = value;
				}
			}
		}
	}
	
	public partial class CountChildStructuresByTypeResult
	{
		
		private long _TypeID;
		
		private System.Nullable<int> _Count;
		
		public CountChildStructuresByTypeResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="BigInt NOT NULL")]
		public long TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this._TypeID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this._Count = value;
				}
			}
		}
	}
	
	public partial class SelectUnfinishedStructureBranchesResult
	{
		
		private long _ID;
		
		public SelectUnfinishedStructureBranchesResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
	
	public partial class SelectUnfinishedStructureBranchesWithPositionResult
	{
		
		private long _ID;
		
		private double _X;
		
		private double _Y;
		
		private double _Z;
		
		private double _Radius;
		
		public SelectUnfinishedStructureBranchesWithPositionResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Float NOT NULL")]
		public double X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this._X = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Float NOT NULL")]
		public double Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this._Y = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Z", DbType="Float NOT NULL")]
		public double Z
		{
			get
			{
				return this._Z;
			}
			set
			{
				if ((this._Z != value))
				{
					this._Z = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Radius", DbType="Float NOT NULL")]
		public double Radius
		{
			get
			{
				return this._Radius;
			}
			set
			{
				if ((this._Radius != value))
				{
					this._Radius = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
