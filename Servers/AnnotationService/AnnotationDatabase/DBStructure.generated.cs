#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;


namespace Annotation.Database
{	
	[Table(Name=@"dbo.Structure")]
	public partial class DBStructure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public DBStructure()
		{
			_DBLocations = new EntitySet<DBLocation>(attach_DBLocations, detach_DBLocations);
			_DBStructureLinks = new EntitySet<DBStructureLink>(attach_IsSourceOf, detach_IsSourceOf);
			_DBStructureLinks1 = new EntitySet<DBStructureLink>(attach_IsTargetOf, detach_IsTargetOf);
			_DBStructures = new EntitySet<DBStructure>(attach_ChildStructures, detach_ChildStructures);
			_DBStructureType = default(EntityRef<DBStructureType>); 
			_ParentStructure = default(EntityRef<DBStructure>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIDChanging(long value);
		partial void OnIDChanged();
		private long _ID;
		[Column(Storage=@"_ID", AutoSync=AutoSync.OnInsert, DbType=@"BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public long ID
		{
			get { return _ID; }
			set {
				if (_ID != value) {
					OnIDChanging(value);
					SendPropertyChanging();
					_ID = value;
					SendPropertyChanged("ID");
					OnIDChanged();
				}
			}
		}
		
		partial void OnTypeIDChanging(long value);
		partial void OnTypeIDChanged();
		private long _TypeID;
		[Column(Storage=@"_TypeID", DbType=@"BigInt NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public long TypeID
		{
			get { return _TypeID; }
			set {
				if (_TypeID != value) {
					if (_DBStructureType.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnTypeIDChanging(value);
					SendPropertyChanging();
					_TypeID = value;
					SendPropertyChanged("TypeID");
					OnTypeIDChanged();
				}
			}
		}
		
		partial void OnNotesChanging(string value);
		partial void OnNotesChanged();
		private string _Notes;
		[Column(Storage=@"_Notes", DbType=@"Text", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Notes
		{
			get { return _Notes; }
			set {
				if (_Notes != value) {
					OnNotesChanging(value);
					SendPropertyChanging();
					_Notes = value;
					SendPropertyChanged("Notes");
					OnNotesChanged();
				}
			}
		}
		
		partial void OnVerifiedChanging(bool value);
		partial void OnVerifiedChanged();
		private bool _Verified;
		[Column(Storage=@"_Verified", DbType=@"Bit NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public bool Verified
		{
			get { return _Verified; }
			set {
				if (_Verified != value) {
					OnVerifiedChanging(value);
					SendPropertyChanging();
					_Verified = value;
					SendPropertyChanged("Verified");
					OnVerifiedChanged();
				}
			}
		}
		
		partial void OnTagsChanging(string value);
		partial void OnTagsChanged();
		private string _Tags;
		[Column(Storage=@"_Tags", DbType=@"Xml", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Tags
		{
			get { return _Tags; }
			set {
				if (_Tags != value) {
					OnTagsChanging(value);
					SendPropertyChanging();
					_Tags = value;
					SendPropertyChanged("Tags");
					OnTagsChanged();
				}
			}
		}
		
		partial void OnConfidenceChanging(double value);
		partial void OnConfidenceChanged();
		private double _Confidence;
		[Column(Storage=@"_Confidence", DbType=@"Float NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public double Confidence
		{
			get { return _Confidence; }
			set {
				if (_Confidence != value) {
					OnConfidenceChanging(value);
					SendPropertyChanging();
					_Confidence = value;
					SendPropertyChanged("Confidence");
					OnConfidenceChanged();
				}
			}
		}
		
		partial void OnVersionChanging(Binary value);
		partial void OnVersionChanged();
		private Binary _Version;
		[Column(Storage=@"_Version", AutoSync=AutoSync.Always, DbType=@"rowversion NOT NULL", IsDbGenerated=true, IsVersion=true, CanBeNull=false)]
		public Binary Version
		{
			get { return _Version; }
			set {
				if (_Version != value) {
					OnVersionChanging(value);
					SendPropertyChanging();
					_Version = value;
					SendPropertyChanged("Version");
					OnVersionChanged();
				}
			}
		}
		
		partial void OnParentIDChanging(long? value);
		partial void OnParentIDChanged();
		private long? _ParentID;
		[Column(Storage=@"_ParentID", DbType=@"BigInt", UpdateCheck=UpdateCheck.WhenChanged)]
		public long? ParentID
		{
			get { return _ParentID; }
			set {
				if (_ParentID != value) {
					if (_ParentStructure.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnParentIDChanging(value);
					SendPropertyChanging();
					_ParentID = value;
					SendPropertyChanged("ParentID");
					OnParentIDChanged();
				}
			}
		}
		
		partial void OnLabelChanging(string value);
		partial void OnLabelChanged();
		private string _Label;
		[Column(Storage=@"_Label", DbType=@"Varchar(32)", UpdateCheck=UpdateCheck.WhenChanged)]
		public string Label
		{
			get { return _Label; }
			set {
				if (_Label != value) {
					OnLabelChanging(value);
					SendPropertyChanging();
					_Label = value;
					SendPropertyChanged("Label");
					OnLabelChanged();
				}
			}
		}
		
		partial void OnUsernameChanging(string value);
		partial void OnUsernameChanged();
		private string _Username;
		[Column(Storage=@"_Username", DbType=@"NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Username
		{
			get { return _Username; }
			set {
				if (_Username != value) {
					OnUsernameChanging(value);
					SendPropertyChanging();
					_Username = value;
					SendPropertyChanged("Username");
					OnUsernameChanged();
				}
			}
		}
		
		partial void OnLastModifiedChanging(DateTime value);
		partial void OnLastModifiedChanged();
		private DateTime _LastModified = default(DateTime);
		[Column(Storage=@"_LastModified", AutoSync=AutoSync.Always, DbType=@"DateTime NOT NULL", IsDbGenerated=true, CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public DateTime LastModified
		{
			get { return _LastModified; }
		}
		
		partial void OnCreatedChanging(DateTime value);
		partial void OnCreatedChanged();
		private DateTime _Created = default(DateTime);
		[Column(Storage=@"_Created", AutoSync=AutoSync.Always, DbType=@"DateTime NOT NULL", IsDbGenerated=true, CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public DateTime Created
		{
			get { return _Created; }
		}
		
		#endregion
		
		#region Associations
		private EntitySet<DBLocation> _DBLocations;
		[Association(Name=@"DBStructure_DBLocation", Storage=@"_DBLocations", ThisKey=@"ID", OtherKey=@"ParentID")]
		public EntitySet<DBLocation> DBLocations
		{
			get {
				return _DBLocations;
			}
			set {
				_DBLocations.Assign(value);
			}
		}

		private void attach_DBLocations(DBLocation entity)
		{
			SendPropertyChanging();
			entity.DBStructure = this;
		}
		
		private void detach_DBLocations(DBLocation entity)
		{
			SendPropertyChanging();
			entity.DBStructure = null;
		}
		
		private EntitySet<DBStructureLink> _DBStructureLinks;
		[Association(Name=@"DBStructure_DBStructureLink", Storage=@"_DBStructureLinks", ThisKey=@"ID", OtherKey=@"IsSourceOf")]
		public EntitySet<DBStructureLink> IsSourceOf
		{
			get {
				return _DBStructureLinks;
			}
			set {
				_DBStructureLinks.Assign(value);
			}
		}

		private void attach_IsSourceOf(DBStructureLink entity)
		{
			SendPropertyChanging();
			entity.SourceStructure = this;
		}
		
		private void detach_IsSourceOf(DBStructureLink entity)
		{
			SendPropertyChanging();
			entity.SourceStructure = null;
		}
		
		private EntitySet<DBStructureLink> _DBStructureLinks1;
		[Association(Name=@"DBStructure_DBStructureLink1", Storage=@"_DBStructureLinks1", ThisKey=@"ID", OtherKey=@"IsTargetOf")]
		public EntitySet<DBStructureLink> IsTargetOf
		{
			get {
				return _DBStructureLinks1;
			}
			set {
				_DBStructureLinks1.Assign(value);
			}
		}

		private void attach_IsTargetOf(DBStructureLink entity)
		{
			SendPropertyChanging();
			entity.TargetStructure = this;
		}
		
		private void detach_IsTargetOf(DBStructureLink entity)
		{
			SendPropertyChanging();
			entity.TargetStructure = null;
		}
		
		private EntitySet<DBStructure> _DBStructures;
		[Association(Name=@"DBStructure_DBStructure", Storage=@"_DBStructures", ThisKey=@"ID", OtherKey=@"ParentID")]
		public EntitySet<DBStructure> ChildStructures
		{
			get {
				return _DBStructures;
			}
			set {
				_DBStructures.Assign(value);
			}
		}

		private void attach_ChildStructures(DBStructure entity)
		{
			SendPropertyChanging();
			entity.ParentStructure = this;
		}
		
		private void detach_ChildStructures(DBStructure entity)
		{
			SendPropertyChanging();
			entity.ParentStructure = null;
		}
		
		private EntityRef<DBStructureType> _DBStructureType;
		[Association(Name=@"DBStructureType_DBStructure", Storage=@"_DBStructureType", ThisKey=@"TypeID", OtherKey=@"ID", IsForeignKey=true)]
		public DBStructureType StructureType
		{
			get {
				return _DBStructureType.Entity;
			}
			set {
				DBStructureType previousValue = _DBStructureType.Entity;
				if ((previousValue != value) || (!_DBStructureType.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_DBStructureType.Entity = null;
						previousValue.Structures.Remove(this);
					}
					_DBStructureType.Entity = value;
					if (value != null) {
						value.Structures.Add(this);
						_TypeID = value.ID;
					}
					else {
						_TypeID = default(long);
					}
					SendPropertyChanged("StructureType");
				}
			}
		}

		private EntityRef<DBStructure> _ParentStructure;
		[Association(Name=@"DBStructure_DBStructure", Storage=@"_ParentStructure", ThisKey=@"ParentID", OtherKey=@"ID", IsForeignKey=true)]
		public DBStructure ParentStructure
		{
			get {
				return _ParentStructure.Entity;
			}
			set {
				DBStructure previousValue = _ParentStructure.Entity;
				if ((previousValue != value) || (!_ParentStructure.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_ParentStructure.Entity = null;
						previousValue.ChildStructures.Remove(this);
					}
					_ParentStructure.Entity = value;
					if (value != null) {
						value.ChildStructures.Add(this);
						_ParentID = value.ID;
					}
					else {
						_ParentID = default(long?);
					}
					SendPropertyChanged("ParentStructure");
				}
			}
		}

		#endregion
	}
}
#pragma warning restore 1591