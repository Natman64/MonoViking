#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;


namespace Annotation.Database
{	
	[Table(Name=@"dbo.StructureTemplates")]
	public partial class StructureTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public StructureTemplate()
		{
			_DBStructureType = default(EntityRef<DBStructureType>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIDChanging(long value);
		partial void OnIDChanged();
		private long _ID;
		[Column(Storage=@"_ID", AutoSync=AutoSync.OnInsert, DbType=@"BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.WhenChanged)]
		public long ID
		{
			get { return _ID; }
			set {
				if (_ID != value) {
					OnIDChanging(value);
					SendPropertyChanging();
					_ID = value;
					SendPropertyChanged("ID");
					OnIDChanged();
				}
			}
		}
		
		partial void OnNameChanging(string value);
		partial void OnNameChanged();
		private string _Name;
		[Column(Storage=@"_Name", DbType=@"Char(64) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Name
		{
			get { return _Name; }
			set {
				if (_Name != value) {
					OnNameChanging(value);
					SendPropertyChanging();
					_Name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}
		
		partial void OnStructureTypeIDChanging(long value);
		partial void OnStructureTypeIDChanged();
		private long _StructureTypeID;
		[Column(Storage=@"_StructureTypeID", DbType=@"BigInt NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public long StructureTypeID
		{
			get { return _StructureTypeID; }
			set {
				if (_StructureTypeID != value) {
					if (_DBStructureType.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnStructureTypeIDChanging(value);
					SendPropertyChanging();
					_StructureTypeID = value;
					SendPropertyChanged("StructureTypeID");
					OnStructureTypeIDChanged();
				}
			}
		}
		
		partial void OnStructureTagsChanging(string value);
		partial void OnStructureTagsChanged();
		private string _StructureTags;
		[Column(Storage=@"_StructureTags", DbType=@"Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string StructureTags
		{
			get { return _StructureTags; }
			set {
				if (_StructureTags != value) {
					OnStructureTagsChanging(value);
					SendPropertyChanging();
					_StructureTags = value;
					SendPropertyChanged("StructureTags");
					OnStructureTagsChanged();
				}
			}
		}
		
		partial void OnVersionChanging(Binary value);
		partial void OnVersionChanged();
		private Binary _Version;
		[Column(Storage=@"_Version", AutoSync=AutoSync.Always, DbType=@"rowversion NOT NULL", IsDbGenerated=true, IsVersion=true, CanBeNull=false)]
		public Binary Version
		{
			get { return _Version; }
			set {
				if (_Version != value) {
					OnVersionChanging(value);
					SendPropertyChanging();
					_Version = value;
					SendPropertyChanged("Version");
					OnVersionChanged();
				}
			}
		}
		
		#endregion
		
		#region Associations
		private EntityRef<DBStructureType> _DBStructureType;
		[Association(Name=@"DBStructureType_StructureTemplate", Storage=@"_DBStructureType", ThisKey=@"StructureTypeID", OtherKey=@"ID", IsForeignKey=true)]
		public DBStructureType DBStructureType
		{
			get {
				return _DBStructureType.Entity;
			}
			set {
				DBStructureType previousValue = _DBStructureType.Entity;
				if ((previousValue != value) || (!_DBStructureType.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_DBStructureType.Entity = null;
						previousValue.StructureTemplates.Remove(this);
					}
					_DBStructureType.Entity = value;
					if (value != null) {
						value.StructureTemplates.Add(this);
						_StructureTypeID = value.ID;
					}
					else {
						_StructureTypeID = default(long);
					}
					SendPropertyChanged("DBStructureType");
				}
			}
		}

		#endregion
	}
}
#pragma warning restore 1591