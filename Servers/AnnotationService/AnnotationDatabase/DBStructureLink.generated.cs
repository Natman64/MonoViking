#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by LINQ to SQL template for T4 C#
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;


namespace Annotation.Database
{	
	[Table(Name=@"dbo.StructureLink")]
	public partial class DBStructureLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Property Change Event Handling
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		public event PropertyChangingEventHandler PropertyChanging;
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if (PropertyChanging != null) {
				PropertyChanging(this, emptyChangingEventArgs);
			}
		}
			
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if (PropertyChanged != null) {
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(ChangeAction action);
		partial void OnCreated();
		#endregion

		#region Construction
		public DBStructureLink()
		{
			_Structure = default(EntityRef<DBStructure>); 
			_DBStructure = default(EntityRef<DBStructure>); 
			OnCreated();
		}
		#endregion

		#region Column Mappings
		partial void OnIsSourceOfChanging(long value);
		partial void OnIsSourceOfChanged();
		private long _SourceID;
		[Column(Storage=@"_SourceID", Name=@"SourceID", DbType=@"BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long IsSourceOf
		{
			get { return _SourceID; }
			set {
				if (_SourceID != value) {
					if (_Structure.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnIsSourceOfChanging(value);
					SendPropertyChanging();
					_SourceID = value;
					SendPropertyChanged("IsSourceOf");
					OnIsSourceOfChanged();
				}
			}
		}
		
		partial void OnIsTargetOfChanging(long value);
		partial void OnIsTargetOfChanged();
		private long _TargetID;
		[Column(Storage=@"_TargetID", Name=@"TargetID", DbType=@"BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long IsTargetOf
		{
			get { return _TargetID; }
			set {
				if (_TargetID != value) {
					if (_DBStructure.HasLoadedOrAssignedValue) {
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					OnIsTargetOfChanging(value);
					SendPropertyChanging();
					_TargetID = value;
					SendPropertyChanged("IsTargetOf");
					OnIsTargetOfChanged();
				}
			}
		}
		
		partial void OnBidirectionalChanging(bool value);
		partial void OnBidirectionalChanged();
		private bool _Bidirectional;
		[Column(Storage=@"_Bidirectional", DbType=@"Bit NOT NULL", CanBeNull=false)]
		public bool Bidirectional
		{
			get { return _Bidirectional; }
			set {
				if (_Bidirectional != value) {
					OnBidirectionalChanging(value);
					SendPropertyChanging();
					_Bidirectional = value;
					SendPropertyChanged("Bidirectional");
					OnBidirectionalChanged();
				}
			}
		}
		
		partial void OnTagsChanging(string value);
		partial void OnTagsChanged();
		private string _Tags;
		[Column(Storage=@"_Tags", DbType=@"Xml", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Tags
		{
			get { return _Tags; }
			set {
				if (_Tags != value) {
					OnTagsChanging(value);
					SendPropertyChanging();
					_Tags = value;
					SendPropertyChanged("Tags");
					OnTagsChanged();
				}
			}
		}
		
		partial void OnUsernameChanging(string value);
		partial void OnUsernameChanged();
		private Link<string> _Username;
		[Column(Storage=@"_Username", DbType=@"NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.WhenChanged)]
		public string Username
		{
			get { return _Username.Value; }
			set {
				if (_Username.Value != value) {
					OnUsernameChanging(value);
					SendPropertyChanging();
					_Username.Value = value;
					SendPropertyChanged("Username");
					OnUsernameChanged();
				}
			}
		}
		
		partial void OnCreatedChanging(DateTime value);
		partial void OnCreatedChanged();
		private DateTime _Created = default(DateTime);
		[Column(Storage=@"_Created", AutoSync=AutoSync.Always, DbType=@"DateTime NOT NULL", IsDbGenerated=true, CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public DateTime Created
		{
			get { return _Created; }
		}
		
		partial void OnLastModifiedChanging(DateTime value);
		partial void OnLastModifiedChanged();
		private DateTime _LastModified = default(DateTime);
		[Column(Storage=@"_LastModified", AutoSync=AutoSync.Always, DbType=@"DateTime NOT NULL", IsDbGenerated=true, CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public DateTime LastModified
		{
			get { return _LastModified; }
		}
		
		#endregion
		
		#region Associations
		private EntityRef<DBStructure> _Structure;
		[Association(Name=@"DBStructure_DBStructureLink", Storage=@"_Structure", ThisKey=@"IsSourceOf", OtherKey=@"ID", IsForeignKey=true)]
		public DBStructure SourceStructure
		{
			get {
				return _Structure.Entity;
			}
			set {
				DBStructure previousValue = _Structure.Entity;
				if ((previousValue != value) || (!_Structure.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_Structure.Entity = null;
						previousValue.IsSourceOf.Remove(this);
					}
					_Structure.Entity = value;
					if (value != null) {
						value.IsSourceOf.Add(this);
						_SourceID = value.ID;
					}
					else {
						_SourceID = default(long);
					}
					SendPropertyChanged("SourceStructure");
				}
			}
		}

		private EntityRef<DBStructure> _DBStructure;
		[Association(Name=@"DBStructure_DBStructureLink1", Storage=@"_DBStructure", ThisKey=@"IsTargetOf", OtherKey=@"ID", IsForeignKey=true)]
		public DBStructure TargetStructure
		{
			get {
				return _DBStructure.Entity;
			}
			set {
				DBStructure previousValue = _DBStructure.Entity;
				if ((previousValue != value) || (!_DBStructure.HasLoadedOrAssignedValue)) {
					SendPropertyChanging();
					if (previousValue != null) {
						_DBStructure.Entity = null;
						previousValue.IsTargetOf.Remove(this);
					}
					_DBStructure.Entity = value;
					if (value != null) {
						value.IsTargetOf.Add(this);
						_TargetID = value.ID;
					}
					else {
						_TargetID = default(long);
					}
					SendPropertyChanged("TargetStructure");
				}
			}
		}

		#endregion
	}
}
#pragma warning restore 1591